// ignore_for_file: type=lint
// ignore_for_file: return_of_invalid_type

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;
import 'package:ffi/ffi.dart' as pkg_ffi;

/// Bindings for Foundation and supporting frameworks (AppKit/IOKit).
///
/// Regenerate bindings with `dart run ffigen --config=ffigen.yaml`.
///
class NativeMacOsFramework {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeMacOsFramework(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeMacOsFramework.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ObjCSel> _registerName1(String name) {
    final cstr = name.toNativeUtf8();
    final sel = _sel_registerName(cstr.cast());
    pkg_ffi.calloc.free(cstr);
    return sel;
  }

  ffi.Pointer<ObjCSel> _sel_registerName(
    ffi.Pointer<ffi.Char> str,
  ) {
    return __sel_registerName(
      str,
    );
  }

  late final __sel_registerNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ffi.Char>)>>('sel_registerName');
  late final __sel_registerName = __sel_registerNamePtr
      .asFunction<ffi.Pointer<ObjCSel> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ObjCObject> _getClass1(String name) {
    final cstr = name.toNativeUtf8();
    final clazz = _objc_getClass(cstr.cast());
    pkg_ffi.calloc.free(cstr);
    if (clazz == ffi.nullptr) {
      throw Exception('Failed to load Objective-C class: $name');
    }
    return clazz;
  }

  ffi.Pointer<ObjCObject> _objc_getClass(
    ffi.Pointer<ffi.Char> str,
  ) {
    return __objc_getClass(
      str,
    );
  }

  late final __objc_getClassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ffi.Char>)>>('objc_getClass');
  late final __objc_getClass = __objc_getClassPtr
      .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ObjCObject> _objc_retain(
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_retain(
      value,
    );
  }

  late final __objc_retainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('objc_retain');
  late final __objc_retain = __objc_retainPtr
      .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  void _objc_release(
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_release(
      value,
    );
  }

  late final __objc_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'objc_release');
  late final __objc_release =
      __objc_releasePtr.asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  late final _objc_releaseFinalizer2 =
      ffi.NativeFinalizer(__objc_releasePtr.cast());
  late final _class_NSObject1 = _getClass1("NSObject");
  late final _sel_load1 = _registerName1("load");
  void _objc_msgSend_1(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_1(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_1 = __objc_msgSend_1Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_initialize1 = _registerName1("initialize");
  late final _sel_init1 = _registerName1("init");
  instancetype _objc_msgSend_2(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_2(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_2Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_2 = __objc_msgSend_2Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_new1 = _registerName1("new");
  late final _sel_allocWithZone_1 = _registerName1("allocWithZone:");
  instancetype _objc_msgSend_3(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_NSZone> zone,
  ) {
    return __objc_msgSend_3(
      obj,
      sel,
      zone,
    );
  }

  late final __objc_msgSend_3Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_NSZone>)>>('objc_msgSend');
  late final __objc_msgSend_3 = __objc_msgSend_3Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_NSZone>)>();

  late final _sel_alloc1 = _registerName1("alloc");
  late final _sel_dealloc1 = _registerName1("dealloc");
  late final _sel_finalize1 = _registerName1("finalize");
  late final _sel_copy1 = _registerName1("copy");
  late final _sel_mutableCopy1 = _registerName1("mutableCopy");
  late final _sel_copyWithZone_1 = _registerName1("copyWithZone:");
  late final _sel_mutableCopyWithZone_1 =
      _registerName1("mutableCopyWithZone:");
  late final _sel_instancesRespondToSelector_1 =
      _registerName1("instancesRespondToSelector:");
  bool _objc_msgSend_4(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_4(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_4 = __objc_msgSend_4Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  bool _objc_msgSend_0(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> clazz,
  ) {
    return __objc_msgSend_0(
      obj,
      sel,
      clazz,
    );
  }

  late final __objc_msgSend_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_0 = __objc_msgSend_0Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_isKindOfClass_1 = _registerName1("isKindOfClass:");
  late final _class_Protocol1 = _getClass1("Protocol");
  late final _sel_conformsToProtocol_1 = _registerName1("conformsToProtocol:");
  bool _objc_msgSend_5(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> protocol,
  ) {
    return __objc_msgSend_5(
      obj,
      sel,
      protocol,
    );
  }

  late final __objc_msgSend_5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_5 = __objc_msgSend_5Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_methodForSelector_1 = _registerName1("methodForSelector:");
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _objc_msgSend_6(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_6(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_6 = __objc_msgSend_6Ptr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_instanceMethodForSelector_1 =
      _registerName1("instanceMethodForSelector:");
  late final _sel_doesNotRecognizeSelector_1 =
      _registerName1("doesNotRecognizeSelector:");
  void _objc_msgSend_7(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_7(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_7 = __objc_msgSend_7Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_forwardingTargetForSelector_1 =
      _registerName1("forwardingTargetForSelector:");
  ffi.Pointer<ObjCObject> _objc_msgSend_8(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_8(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_8 = __objc_msgSend_8Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>();

  late final _class_NSInvocation1 = _getClass1("NSInvocation");
  late final _sel_forwardInvocation_1 = _registerName1("forwardInvocation:");
  void _objc_msgSend_9(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anInvocation,
  ) {
    return __objc_msgSend_9(
      obj,
      sel,
      anInvocation,
    );
  }

  late final __objc_msgSend_9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_9 = __objc_msgSend_9Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _class_NSMethodSignature1 = _getClass1("NSMethodSignature");
  late final _sel_methodSignatureForSelector_1 =
      _registerName1("methodSignatureForSelector:");
  ffi.Pointer<ObjCObject> _objc_msgSend_10(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_10(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_10 = __objc_msgSend_10Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>();

  late final _sel_instanceMethodSignatureForSelector_1 =
      _registerName1("instanceMethodSignatureForSelector:");
  late final _sel_allowsWeakReference1 = _registerName1("allowsWeakReference");
  bool _objc_msgSend_11(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_11(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_11 = __objc_msgSend_11Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_retainWeakReference1 = _registerName1("retainWeakReference");
  late final _sel_isSubclassOfClass_1 = _registerName1("isSubclassOfClass:");
  late final _sel_resolveClassMethod_1 = _registerName1("resolveClassMethod:");
  late final _sel_resolveInstanceMethod_1 =
      _registerName1("resolveInstanceMethod:");
  late final _sel_hash1 = _registerName1("hash");
  int _objc_msgSend_12(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_12(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_12 = __objc_msgSend_12Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_superclass1 = _registerName1("superclass");
  late final _sel_class1 = _registerName1("class");
  late final _class_NSString1 = _getClass1("NSString");
  late final _sel_stringWithCharacters_length_1 =
      _registerName1("stringWithCharacters:length:");
  ffi.Pointer<ObjCObject> _objc_msgSend_13(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.WChar> characters,
    int length,
  ) {
    return __objc_msgSend_13(
      obj,
      sel,
      characters,
      length,
    );
  }

  late final __objc_msgSend_13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.WChar>,
              ffi.UnsignedInt)>>('objc_msgSend');
  late final __objc_msgSend_13 = __objc_msgSend_13Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.WChar>, int)>();

  late final _class_NSData1 = _getClass1("NSData");
  late final _sel_bytes1 = _registerName1("bytes");
  ffi.Pointer<ffi.Void> _objc_msgSend_14(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_14(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_14 = __objc_msgSend_14Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_dataUsingEncoding_1 = _registerName1("dataUsingEncoding:");
  ffi.Pointer<ObjCObject> _objc_msgSend_15(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int encoding,
  ) {
    return __objc_msgSend_15(
      obj,
      sel,
      encoding,
    );
  }

  late final __objc_msgSend_15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedInt)>>('objc_msgSend');
  late final __objc_msgSend_15 = __objc_msgSend_15Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_length1 = _registerName1("length");
  int _objc_msgSend_16(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_16(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_16 = __objc_msgSend_16Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_description1 = _registerName1("description");
  ffi.Pointer<ObjCObject> _objc_msgSend_17(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_17(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_17 = __objc_msgSend_17Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_debugDescription1 = _registerName1("debugDescription");
  late final _sel_version1 = _registerName1("version");
  int _objc_msgSend_18(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_18(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_18 = __objc_msgSend_18Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setVersion_1 = _registerName1("setVersion:");
  void _objc_msgSend_19(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int aVersion,
  ) {
    return __objc_msgSend_19(
      obj,
      sel,
      aVersion,
    );
  }

  late final __objc_msgSend_19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_19 = __objc_msgSend_19Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_classForCoder1 = _registerName1("classForCoder");
  late final _class_NSCoder1 = _getClass1("NSCoder");
  late final _sel_encodeValueOfObjCType_at_1 =
      _registerName1("encodeValueOfObjCType:at:");
  void _objc_msgSend_20(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> type,
    ffi.Pointer<ffi.Void> addr,
  ) {
    return __objc_msgSend_20(
      obj,
      sel,
      type,
      addr,
    );
  }

  late final __objc_msgSend_20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_20 = __objc_msgSend_20Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  late final _sel_encodeDataObject_1 = _registerName1("encodeDataObject:");
  void _objc_msgSend_21(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> data,
  ) {
    return __objc_msgSend_21(
      obj,
      sel,
      data,
    );
  }

  late final __objc_msgSend_21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_21 = __objc_msgSend_21Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeDataObject1 = _registerName1("decodeDataObject");
  ffi.Pointer<ObjCObject> _objc_msgSend_22(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_22(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_22 = __objc_msgSend_22Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_decodeValueOfObjCType_at_size_1 =
      _registerName1("decodeValueOfObjCType:at:size:");
  void _objc_msgSend_23(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> type,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    return __objc_msgSend_23(
      obj,
      sel,
      type,
      data,
      size,
    );
  }

  late final __objc_msgSend_23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_23 = __objc_msgSend_23Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  late final _sel_versionForClassName_1 =
      _registerName1("versionForClassName:");
  int _objc_msgSend_24(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> className,
  ) {
    return __objc_msgSend_24(
      obj,
      sel,
      className,
    );
  }

  late final __objc_msgSend_24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_24 = __objc_msgSend_24Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeObject_1 = _registerName1("encodeObject:");
  void _objc_msgSend_25(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> object,
  ) {
    return __objc_msgSend_25(
      obj,
      sel,
      object,
    );
  }

  late final __objc_msgSend_25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_25 = __objc_msgSend_25Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeRootObject_1 = _registerName1("encodeRootObject:");
  late final _sel_encodeBycopyObject_1 = _registerName1("encodeBycopyObject:");
  late final _sel_encodeByrefObject_1 = _registerName1("encodeByrefObject:");
  late final _sel_encodeConditionalObject_1 =
      _registerName1("encodeConditionalObject:");
  late final _sel_encodeValuesOfObjCTypes_1 =
      _registerName1("encodeValuesOfObjCTypes:");
  void _objc_msgSend_26(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> types,
  ) {
    return __objc_msgSend_26(
      obj,
      sel,
      types,
    );
  }

  late final __objc_msgSend_26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>)>>('objc_msgSend');
  late final __objc_msgSend_26 = __objc_msgSend_26Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>)>();

  late final _sel_encodeArrayOfObjCType_count_at_1 =
      _registerName1("encodeArrayOfObjCType:count:at:");
  void _objc_msgSend_27(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> type,
    int count,
    ffi.Pointer<ffi.Void> array,
  ) {
    return __objc_msgSend_27(
      obj,
      sel,
      type,
      count,
      array,
    );
  }

  late final __objc_msgSend_27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedLong,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_27 = __objc_msgSend_27Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Void>)>();

  late final _sel_encodeBytes_length_1 = _registerName1("encodeBytes:length:");
  void _objc_msgSend_28(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> byteaddr,
    int length,
  ) {
    return __objc_msgSend_28(
      obj,
      sel,
      byteaddr,
      length,
    );
  }

  late final __objc_msgSend_28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_28 = __objc_msgSend_28Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int)>();

  late final _sel_decodeObject1 = _registerName1("decodeObject");
  late final _class_NSError1 = _getClass1("NSError");
  late final _sel_decodeTopLevelObjectAndReturnError_1 =
      _registerName1("decodeTopLevelObjectAndReturnError:");
  ffi.Pointer<ObjCObject> _objc_msgSend_29(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_29(
      obj,
      sel,
      error,
    );
  }

  late final __objc_msgSend_29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_29 = __objc_msgSend_29Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_decodeValuesOfObjCTypes_1 =
      _registerName1("decodeValuesOfObjCTypes:");
  late final _sel_decodeArrayOfObjCType_count_at_1 =
      _registerName1("decodeArrayOfObjCType:count:at:");
  late final _sel_decodeBytesWithReturnedLength_1 =
      _registerName1("decodeBytesWithReturnedLength:");
  ffi.Pointer<ffi.Void> _objc_msgSend_30(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.UnsignedLong> lengthp,
  ) {
    return __objc_msgSend_30(
      obj,
      sel,
      lengthp,
    );
  }

  late final __objc_msgSend_30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.UnsignedLong>)>>('objc_msgSend');
  late final __objc_msgSend_30 = __objc_msgSend_30Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.UnsignedLong>)>();

  late final _sel_encodePropertyList_1 = _registerName1("encodePropertyList:");
  late final _sel_decodePropertyList1 = _registerName1("decodePropertyList");
  late final _sel_setObjectZone_1 = _registerName1("setObjectZone:");
  void _objc_msgSend_31(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_NSZone> zone,
  ) {
    return __objc_msgSend_31(
      obj,
      sel,
      zone,
    );
  }

  late final __objc_msgSend_31Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_NSZone>)>>('objc_msgSend');
  late final __objc_msgSend_31 = __objc_msgSend_31Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_NSZone>)>();

  late final _sel_objectZone1 = _registerName1("objectZone");
  ffi.Pointer<_NSZone> _objc_msgSend_32(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_32(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<_NSZone> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_32 = __objc_msgSend_32Ptr.asFunction<
      ffi.Pointer<_NSZone> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_systemVersion1 = _registerName1("systemVersion");
  late final _sel_allowsKeyedCoding1 = _registerName1("allowsKeyedCoding");
  late final _sel_encodeObject_forKey_1 =
      _registerName1("encodeObject:forKey:");
  void _objc_msgSend_33(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> object,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_33(
      obj,
      sel,
      object,
      key,
    );
  }

  late final __objc_msgSend_33Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_33 = __objc_msgSend_33Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeConditionalObject_forKey_1 =
      _registerName1("encodeConditionalObject:forKey:");
  late final _sel_encodeBool_forKey_1 = _registerName1("encodeBool:forKey:");
  void _objc_msgSend_34(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool value,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_34(
      obj,
      sel,
      value,
      key,
    );
  }

  late final __objc_msgSend_34Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Bool, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_34 = __objc_msgSend_34Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, bool,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeInt_forKey_1 = _registerName1("encodeInt:forKey:");
  void _objc_msgSend_35(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_35(
      obj,
      sel,
      value,
      key,
    );
  }

  late final __objc_msgSend_35Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_35 = __objc_msgSend_35Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeInt32_forKey_1 = _registerName1("encodeInt32:forKey:");
  void _objc_msgSend_36(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_36(
      obj,
      sel,
      value,
      key,
    );
  }

  late final __objc_msgSend_36Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_36 = __objc_msgSend_36Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeInt64_forKey_1 = _registerName1("encodeInt64:forKey:");
  void _objc_msgSend_37(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_37(
      obj,
      sel,
      value,
      key,
    );
  }

  late final __objc_msgSend_37Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int64, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_37 = __objc_msgSend_37Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeFloat_forKey_1 = _registerName1("encodeFloat:forKey:");
  void _objc_msgSend_38(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_38(
      obj,
      sel,
      value,
      key,
    );
  }

  late final __objc_msgSend_38Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Float, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_38 = __objc_msgSend_38Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeDouble_forKey_1 =
      _registerName1("encodeDouble:forKey:");
  void _objc_msgSend_39(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_39(
      obj,
      sel,
      value,
      key,
    );
  }

  late final __objc_msgSend_39Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Double, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_39 = __objc_msgSend_39Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeBytes_length_forKey_1 =
      _registerName1("encodeBytes:length:forKey:");
  void _objc_msgSend_40(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Uint8> bytes,
    int length,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_40(
      obj,
      sel,
      bytes,
      length,
      key,
    );
  }

  late final __objc_msgSend_40Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Uint8>,
              ffi.UnsignedLong,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_40 = __objc_msgSend_40Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ObjCObject>)>();

  late final _sel_containsValueForKey_1 =
      _registerName1("containsValueForKey:");
  bool _objc_msgSend_41(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_41(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_41Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_41 = __objc_msgSend_41Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeObjectForKey_1 = _registerName1("decodeObjectForKey:");
  ffi.Pointer<ObjCObject> _objc_msgSend_42(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_42(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_42Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_42 = __objc_msgSend_42Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeTopLevelObjectForKey_error_1 =
      _registerName1("decodeTopLevelObjectForKey:error:");
  ffi.Pointer<ObjCObject> _objc_msgSend_43(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_43(
      obj,
      sel,
      key,
      error,
    );
  }

  late final __objc_msgSend_43Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_43 = __objc_msgSend_43Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_decodeBoolForKey_1 = _registerName1("decodeBoolForKey:");
  late final _sel_decodeIntForKey_1 = _registerName1("decodeIntForKey:");
  int _objc_msgSend_44(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_44(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_44Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_44 = __objc_msgSend_44Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeInt32ForKey_1 = _registerName1("decodeInt32ForKey:");
  int _objc_msgSend_45(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_45(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_45Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_45 = __objc_msgSend_45Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeInt64ForKey_1 = _registerName1("decodeInt64ForKey:");
  int _objc_msgSend_46(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_46(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_46Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_46 = __objc_msgSend_46Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeFloatForKey_1 = _registerName1("decodeFloatForKey:");
  double _objc_msgSend_47(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_47(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_47Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_47 = __objc_msgSend_47Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeDoubleForKey_1 = _registerName1("decodeDoubleForKey:");
  double _objc_msgSend_48(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_48(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_48 = __objc_msgSend_48Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeBytesForKey_returnedLength_1 =
      _registerName1("decodeBytesForKey:returnedLength:");
  ffi.Pointer<ffi.Uint8> _objc_msgSend_49(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
    ffi.Pointer<ffi.UnsignedLong> lengthp,
  ) {
    return __objc_msgSend_49(
      obj,
      sel,
      key,
      lengthp,
    );
  }

  late final __objc_msgSend_49Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.UnsignedLong>)>>('objc_msgSend');
  late final __objc_msgSend_49 = __objc_msgSend_49Ptr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.UnsignedLong>)>();

  late final _sel_encodeInteger_forKey_1 =
      _registerName1("encodeInteger:forKey:");
  void _objc_msgSend_50(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_50(
      obj,
      sel,
      value,
      key,
    );
  }

  late final __objc_msgSend_50Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Long, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_50 = __objc_msgSend_50Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeIntegerForKey_1 =
      _registerName1("decodeIntegerForKey:");
  late final _sel_requiresSecureCoding1 =
      _registerName1("requiresSecureCoding");
  late final _sel_decodeObjectOfClass_forKey_1 =
      _registerName1("decodeObjectOfClass:forKey:");
  ffi.Pointer<ObjCObject> _objc_msgSend_51(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aClass,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_51(
      obj,
      sel,
      aClass,
      key,
    );
  }

  late final __objc_msgSend_51Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_51 = __objc_msgSend_51Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeTopLevelObjectOfClass_forKey_error_1 =
      _registerName1("decodeTopLevelObjectOfClass:forKey:error:");
  ffi.Pointer<ObjCObject> _objc_msgSend_52(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aClass,
    ffi.Pointer<ObjCObject> key,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_52(
      obj,
      sel,
      aClass,
      key,
      error,
    );
  }

  late final __objc_msgSend_52Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_52 = __objc_msgSend_52Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _class_NSArray1 = _getClass1("NSArray");
  late final _sel_count1 = _registerName1("count");
  late final _sel_objectAtIndex_1 = _registerName1("objectAtIndex:");
  ffi.Pointer<ObjCObject> _objc_msgSend_53(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
  ) {
    return __objc_msgSend_53(
      obj,
      sel,
      index,
    );
  }

  late final __objc_msgSend_53Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_53 = __objc_msgSend_53Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithObjects_count_1 =
      _registerName1("initWithObjects:count:");
  instancetype _objc_msgSend_54(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    int cnt,
  ) {
    return __objc_msgSend_54(
      obj,
      sel,
      objects,
      cnt,
    );
  }

  late final __objc_msgSend_54Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_54 = __objc_msgSend_54Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>, int)>();

  late final _sel_initWithCoder_1 = _registerName1("initWithCoder:");
  instancetype _objc_msgSend_55(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> coder,
  ) {
    return __objc_msgSend_55(
      obj,
      sel,
      coder,
    );
  }

  late final __objc_msgSend_55Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_55 = __objc_msgSend_55Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_arrayByAddingObject_1 =
      _registerName1("arrayByAddingObject:");
  ffi.Pointer<ObjCObject> _objc_msgSend_56(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
  ) {
    return __objc_msgSend_56(
      obj,
      sel,
      anObject,
    );
  }

  late final __objc_msgSend_56Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_56 = __objc_msgSend_56Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_arrayByAddingObjectsFromArray_1 =
      _registerName1("arrayByAddingObjectsFromArray:");
  ffi.Pointer<ObjCObject> _objc_msgSend_57(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherArray,
  ) {
    return __objc_msgSend_57(
      obj,
      sel,
      otherArray,
    );
  }

  late final __objc_msgSend_57Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_57 = __objc_msgSend_57Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_componentsJoinedByString_1 =
      _registerName1("componentsJoinedByString:");
  ffi.Pointer<ObjCObject> _objc_msgSend_58(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> separator,
  ) {
    return __objc_msgSend_58(
      obj,
      sel,
      separator,
    );
  }

  late final __objc_msgSend_58Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_58 = __objc_msgSend_58Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_containsObject_1 = _registerName1("containsObject:");
  late final _sel_descriptionWithLocale_1 =
      _registerName1("descriptionWithLocale:");
  ffi.Pointer<ObjCObject> _objc_msgSend_59(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_59(
      obj,
      sel,
      locale,
    );
  }

  late final __objc_msgSend_59Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_59 = __objc_msgSend_59Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_descriptionWithLocale_indent_1 =
      _registerName1("descriptionWithLocale:indent:");
  ffi.Pointer<ObjCObject> _objc_msgSend_60(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> locale,
    int level,
  ) {
    return __objc_msgSend_60(
      obj,
      sel,
      locale,
      level,
    );
  }

  late final __objc_msgSend_60Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_60 = __objc_msgSend_60Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, int)>();

  late final _sel_firstObjectCommonWithArray_1 =
      _registerName1("firstObjectCommonWithArray:");
  ffi.Pointer<ObjCObject> _objc_msgSend_61(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherArray,
  ) {
    return __objc_msgSend_61(
      obj,
      sel,
      otherArray,
    );
  }

  late final __objc_msgSend_61Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_61 = __objc_msgSend_61Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_getObjects_range_1 = _registerName1("getObjects:range:");
  void _objc_msgSend_62(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    _NSRange range,
  ) {
    return __objc_msgSend_62(
      obj,
      sel,
      objects,
      range,
    );
  }

  late final __objc_msgSend_62Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>, _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_62 = __objc_msgSend_62Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>, _NSRange)>();

  late final _sel_indexOfObject_1 = _registerName1("indexOfObject:");
  int _objc_msgSend_63(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
  ) {
    return __objc_msgSend_63(
      obj,
      sel,
      anObject,
    );
  }

  late final __objc_msgSend_63Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_63 = __objc_msgSend_63Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_indexOfObject_inRange_1 =
      _registerName1("indexOfObject:inRange:");
  int _objc_msgSend_64(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
    _NSRange range,
  ) {
    return __objc_msgSend_64(
      obj,
      sel,
      anObject,
      range,
    );
  }

  late final __objc_msgSend_64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_64 = __objc_msgSend_64Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, _NSRange)>();

  late final _sel_indexOfObjectIdenticalTo_1 =
      _registerName1("indexOfObjectIdenticalTo:");
  late final _sel_indexOfObjectIdenticalTo_inRange_1 =
      _registerName1("indexOfObjectIdenticalTo:inRange:");
  late final _sel_isEqualToArray_1 = _registerName1("isEqualToArray:");
  bool _objc_msgSend_65(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherArray,
  ) {
    return __objc_msgSend_65(
      obj,
      sel,
      otherArray,
    );
  }

  late final __objc_msgSend_65Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_65 = __objc_msgSend_65Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_firstObject1 = _registerName1("firstObject");
  late final _sel_lastObject1 = _registerName1("lastObject");
  late final _class_NSEnumerator1 = _getClass1("NSEnumerator");
  late final _sel_nextObject1 = _registerName1("nextObject");
  late final _sel_allObjects1 = _registerName1("allObjects");
  late final _sel_objectEnumerator1 = _registerName1("objectEnumerator");
  ffi.Pointer<ObjCObject> _objc_msgSend_66(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_66(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_66Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_66 = __objc_msgSend_66Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_reverseObjectEnumerator1 =
      _registerName1("reverseObjectEnumerator");
  late final _sel_sortedArrayHint1 = _registerName1("sortedArrayHint");
  late final _sel_sortedArrayUsingFunction_context_1 =
      _registerName1("sortedArrayUsingFunction:context:");
  ffi.Pointer<ObjCObject> _objc_msgSend_67(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Long Function(ffi.Pointer<ObjCObject>,
                    ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>
        comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return __objc_msgSend_67(
      obj,
      sel,
      comparator,
      context,
    );
  }

  late final __objc_msgSend_67Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Long Function(ffi.Pointer<ObjCObject>,
                          ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_67 = __objc_msgSend_67Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Long Function(ffi.Pointer<ObjCObject>,
                      ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_sortedArrayUsingFunction_context_hint_1 =
      _registerName1("sortedArrayUsingFunction:context:hint:");
  ffi.Pointer<ObjCObject> _objc_msgSend_68(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Long Function(ffi.Pointer<ObjCObject>,
                    ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>
        comparator,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<ObjCObject> hint,
  ) {
    return __objc_msgSend_68(
      obj,
      sel,
      comparator,
      context,
      hint,
    );
  }

  late final __objc_msgSend_68Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Long Function(ffi.Pointer<ObjCObject>,
                          ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_68 = __objc_msgSend_68Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Long Function(ffi.Pointer<ObjCObject>,
                      ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_sortedArrayUsingSelector_1 =
      _registerName1("sortedArrayUsingSelector:");
  ffi.Pointer<ObjCObject> _objc_msgSend_69(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> comparator,
  ) {
    return __objc_msgSend_69(
      obj,
      sel,
      comparator,
    );
  }

  late final __objc_msgSend_69Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_69 = __objc_msgSend_69Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>();

  late final _sel_subarrayWithRange_1 = _registerName1("subarrayWithRange:");
  ffi.Pointer<ObjCObject> _objc_msgSend_70(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_70(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_70Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_70 = __objc_msgSend_70Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange)>();

  late final _class_NSURL1 = _getClass1("NSURL");
  late final _sel_writeToURL_error_1 = _registerName1("writeToURL:error:");
  bool _objc_msgSend_71(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_71(
      obj,
      sel,
      url,
      error,
    );
  }

  late final __objc_msgSend_71Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_71 = __objc_msgSend_71Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_makeObjectsPerformSelector_1 =
      _registerName1("makeObjectsPerformSelector:");
  late final _sel_makeObjectsPerformSelector_withObject_1 =
      _registerName1("makeObjectsPerformSelector:withObject:");
  void _objc_msgSend_72(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
    ffi.Pointer<ObjCObject> argument,
  ) {
    return __objc_msgSend_72(
      obj,
      sel,
      aSelector,
      argument,
    );
  }

  late final __objc_msgSend_72Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_72 = __objc_msgSend_72Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _class_NSIndexSet1 = _getClass1("NSIndexSet");
  late final _sel_indexSet1 = _registerName1("indexSet");
  late final _sel_indexSetWithIndex_1 = _registerName1("indexSetWithIndex:");
  late final _sel_indexSetWithIndexesInRange_1 =
      _registerName1("indexSetWithIndexesInRange:");
  instancetype _objc_msgSend_73(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_73(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_73Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_73 = __objc_msgSend_73Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange)>();

  late final _sel_initWithIndexesInRange_1 =
      _registerName1("initWithIndexesInRange:");
  late final _sel_initWithIndexSet_1 = _registerName1("initWithIndexSet:");
  instancetype _objc_msgSend_74(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> indexSet,
  ) {
    return __objc_msgSend_74(
      obj,
      sel,
      indexSet,
    );
  }

  late final __objc_msgSend_74Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_74 = __objc_msgSend_74Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithIndex_1 = _registerName1("initWithIndex:");
  late final _sel_isEqualToIndexSet_1 = _registerName1("isEqualToIndexSet:");
  bool _objc_msgSend_75(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> indexSet,
  ) {
    return __objc_msgSend_75(
      obj,
      sel,
      indexSet,
    );
  }

  late final __objc_msgSend_75Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_75 = __objc_msgSend_75Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_firstIndex1 = _registerName1("firstIndex");
  late final _sel_lastIndex1 = _registerName1("lastIndex");
  late final _sel_indexGreaterThanIndex_1 =
      _registerName1("indexGreaterThanIndex:");
  int _objc_msgSend_76(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_76(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_76Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_76 = __objc_msgSend_76Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_indexLessThanIndex_1 = _registerName1("indexLessThanIndex:");
  late final _sel_indexGreaterThanOrEqualToIndex_1 =
      _registerName1("indexGreaterThanOrEqualToIndex:");
  late final _sel_indexLessThanOrEqualToIndex_1 =
      _registerName1("indexLessThanOrEqualToIndex:");
  late final _sel_getIndexes_maxCount_inIndexRange_1 =
      _registerName1("getIndexes:maxCount:inIndexRange:");
  int _objc_msgSend_77(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.UnsignedLong> indexBuffer,
    int bufferSize,
    ffi.Pointer<_NSRange> range,
  ) {
    return __objc_msgSend_77(
      obj,
      sel,
      indexBuffer,
      bufferSize,
      range,
    );
  }

  late final __objc_msgSend_77Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.UnsignedLong,
              ffi.Pointer<_NSRange>)>>('objc_msgSend');
  late final __objc_msgSend_77 = __objc_msgSend_77Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.UnsignedLong>, int, ffi.Pointer<_NSRange>)>();

  late final _sel_countOfIndexesInRange_1 =
      _registerName1("countOfIndexesInRange:");
  int _objc_msgSend_78(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_78(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_78Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_78 = __objc_msgSend_78Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange)>();

  late final _sel_containsIndex_1 = _registerName1("containsIndex:");
  bool _objc_msgSend_79(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_79(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_79Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_79 = __objc_msgSend_79Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_containsIndexesInRange_1 =
      _registerName1("containsIndexesInRange:");
  bool _objc_msgSend_80(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_80(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_80Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_80 = __objc_msgSend_80Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange)>();

  late final _sel_containsIndexes_1 = _registerName1("containsIndexes:");
  late final _sel_intersectsIndexesInRange_1 =
      _registerName1("intersectsIndexesInRange:");
  ffi.Pointer<_ObjCBlockDesc> _newBlockDesc1() {
    final d =
        pkg_ffi.calloc.allocate<_ObjCBlockDesc>(ffi.sizeOf<_ObjCBlockDesc>());
    d.ref.reserved = 0;
    d.ref.size = ffi.sizeOf<_ObjCBlock>();
    d.ref.copy_helper = ffi.nullptr;
    d.ref.dispose_helper = ffi.nullptr;
    d.ref.signature = ffi.nullptr;
    return d;
  }

  late final _objc_block_desc1 = _newBlockDesc1();
  late final _objc_concrete_global_block1 =
      _lookup<ffi.Void>('_NSConcreteGlobalBlock');
  ffi.Pointer<_ObjCBlock> _newBlock1(
      ffi.Pointer<ffi.Void> invoke, ffi.Pointer<ffi.Void> target) {
    final b = pkg_ffi.calloc.allocate<_ObjCBlock>(ffi.sizeOf<_ObjCBlock>());
    b.ref.isa = _objc_concrete_global_block1;
    b.ref.flags = 0;
    b.ref.reserved = 0;
    b.ref.invoke = invoke;
    b.ref.target = target;
    b.ref.descriptor = _objc_block_desc1;
    final copy = _Block_copy(b.cast()).cast<_ObjCBlock>();
    pkg_ffi.calloc.free(b);
    return copy;
  }

  ffi.Pointer<ffi.Void> _Block_copy(
    ffi.Pointer<ffi.Void> value,
  ) {
    return __Block_copy(
      value,
    );
  }

  late final __Block_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('_Block_copy');
  late final __Block_copy = __Block_copyPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void _Block_release(
    ffi.Pointer<ffi.Void> value,
  ) {
    return __Block_release(
      value,
    );
  }

  late final __Block_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          '_Block_release');
  late final __Block_release =
      __Block_releasePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  late final _objc_releaseFinalizer11 =
      ffi.NativeFinalizer(__Block_releasePtr.cast());
  late final _sel_enumerateIndexesUsingBlock_1 =
      _registerName1("enumerateIndexesUsingBlock:");
  void _objc_msgSend_81(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_81(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_81Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_81 = __objc_msgSend_81Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateIndexesWithOptions_usingBlock_1 =
      _registerName1("enumerateIndexesWithOptions:usingBlock:");
  void _objc_msgSend_82(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_82(
      obj,
      sel,
      opts,
      block,
    );
  }

  late final __objc_msgSend_82Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_82 = __objc_msgSend_82Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateIndexesInRange_options_usingBlock_1 =
      _registerName1("enumerateIndexesInRange:options:usingBlock:");
  void _objc_msgSend_83(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_83(
      obj,
      sel,
      range,
      opts,
      block,
    );
  }

  late final __objc_msgSend_83Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              _NSRange, ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_83 = __objc_msgSend_83Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange,
          int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexPassingTest_1 = _registerName1("indexPassingTest:");
  int _objc_msgSend_84(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_84(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_84Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_84 = __objc_msgSend_84Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexWithOptions_passingTest_1 =
      _registerName1("indexWithOptions:passingTest:");
  int _objc_msgSend_85(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_85(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_85Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_85 = __objc_msgSend_85Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexInRange_options_passingTest_1 =
      _registerName1("indexInRange:options:passingTest:");
  int _objc_msgSend_86(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_86(
      obj,
      sel,
      range,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_86Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              _NSRange,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_86 = __objc_msgSend_86Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexesPassingTest_1 = _registerName1("indexesPassingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_87(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_87(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_87Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_87 = __objc_msgSend_87Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexesWithOptions_passingTest_1 =
      _registerName1("indexesWithOptions:passingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_88(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_88(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_88Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_88 = __objc_msgSend_88Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexesInRange_options_passingTest_1 =
      _registerName1("indexesInRange:options:passingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_89(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_89(
      obj,
      sel,
      range,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_89Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              _NSRange,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_89 = __objc_msgSend_89Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, _NSRange, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateRangesUsingBlock_1 =
      _registerName1("enumerateRangesUsingBlock:");
  void _objc_msgSend_90(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_90(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_90Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_90 = __objc_msgSend_90Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateRangesWithOptions_usingBlock_1 =
      _registerName1("enumerateRangesWithOptions:usingBlock:");
  void _objc_msgSend_91(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_91(
      obj,
      sel,
      opts,
      block,
    );
  }

  late final __objc_msgSend_91Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_91 = __objc_msgSend_91Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateRangesInRange_options_usingBlock_1 =
      _registerName1("enumerateRangesInRange:options:usingBlock:");
  void _objc_msgSend_92(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_92(
      obj,
      sel,
      range,
      opts,
      block,
    );
  }

  late final __objc_msgSend_92Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              _NSRange, ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_92 = __objc_msgSend_92Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange,
          int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_objectsAtIndexes_1 = _registerName1("objectsAtIndexes:");
  ffi.Pointer<ObjCObject> _objc_msgSend_93(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> indexes,
  ) {
    return __objc_msgSend_93(
      obj,
      sel,
      indexes,
    );
  }

  late final __objc_msgSend_93Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_93 = __objc_msgSend_93Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_objectAtIndexedSubscript_1 =
      _registerName1("objectAtIndexedSubscript:");
  late final _sel_enumerateObjectsUsingBlock_1 =
      _registerName1("enumerateObjectsUsingBlock:");
  void _objc_msgSend_94(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_94(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_94Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_94 = __objc_msgSend_94Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateObjectsWithOptions_usingBlock_1 =
      _registerName1("enumerateObjectsWithOptions:usingBlock:");
  void _objc_msgSend_95(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_95(
      obj,
      sel,
      opts,
      block,
    );
  }

  late final __objc_msgSend_95Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_95 = __objc_msgSend_95Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateObjectsAtIndexes_options_usingBlock_1 =
      _registerName1("enumerateObjectsAtIndexes:options:usingBlock:");
  void _objc_msgSend_96(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> s,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_96(
      obj,
      sel,
      s,
      opts,
      block,
    );
  }

  late final __objc_msgSend_96Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_96 = __objc_msgSend_96Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexOfObjectPassingTest_1 =
      _registerName1("indexOfObjectPassingTest:");
  int _objc_msgSend_97(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_97(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_97Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_97 = __objc_msgSend_97Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexOfObjectWithOptions_passingTest_1 =
      _registerName1("indexOfObjectWithOptions:passingTest:");
  int _objc_msgSend_98(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_98(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_98Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_98 = __objc_msgSend_98Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexOfObjectAtIndexes_options_passingTest_1 =
      _registerName1("indexOfObjectAtIndexes:options:passingTest:");
  int _objc_msgSend_99(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> s,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_99(
      obj,
      sel,
      s,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_99Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_99 = __objc_msgSend_99Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexesOfObjectsPassingTest_1 =
      _registerName1("indexesOfObjectsPassingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_100(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_100(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_100Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_100 = __objc_msgSend_100Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexesOfObjectsWithOptions_passingTest_1 =
      _registerName1("indexesOfObjectsWithOptions:passingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_101(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_101(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_101Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_101 = __objc_msgSend_101Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexesOfObjectsAtIndexes_options_passingTest_1 =
      _registerName1("indexesOfObjectsAtIndexes:options:passingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_102(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> s,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_102(
      obj,
      sel,
      s,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_102Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_102 = __objc_msgSend_102Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_sortedArrayUsingComparator_1 =
      _registerName1("sortedArrayUsingComparator:");
  ffi.Pointer<ObjCObject> _objc_msgSend_103(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> cmptr,
  ) {
    return __objc_msgSend_103(
      obj,
      sel,
      cmptr,
    );
  }

  late final __objc_msgSend_103Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_103 = __objc_msgSend_103Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_sortedArrayWithOptions_usingComparator_1 =
      _registerName1("sortedArrayWithOptions:usingComparator:");
  ffi.Pointer<ObjCObject> _objc_msgSend_104(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> cmptr,
  ) {
    return __objc_msgSend_104(
      obj,
      sel,
      opts,
      cmptr,
    );
  }

  late final __objc_msgSend_104Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_104 = __objc_msgSend_104Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexOfObject_inSortedRange_options_usingComparator_1 =
      _registerName1("indexOfObject:inSortedRange:options:usingComparator:");
  int _objc_msgSend_105(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> obj1,
    _NSRange r,
    int opts,
    ffi.Pointer<_ObjCBlock> cmp,
  ) {
    return __objc_msgSend_105(
      obj,
      sel,
      obj1,
      r,
      opts,
      cmp,
    );
  }

  late final __objc_msgSend_105Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              _NSRange,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_105 = __objc_msgSend_105Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, _NSRange, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_array1 = _registerName1("array");
  late final _sel_arrayWithObject_1 = _registerName1("arrayWithObject:");
  instancetype _objc_msgSend_106(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
  ) {
    return __objc_msgSend_106(
      obj,
      sel,
      anObject,
    );
  }

  late final __objc_msgSend_106Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_106 = __objc_msgSend_106Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_arrayWithObjects_count_1 =
      _registerName1("arrayWithObjects:count:");
  late final _sel_arrayWithObjects_1 = _registerName1("arrayWithObjects:");
  late final _sel_arrayWithArray_1 = _registerName1("arrayWithArray:");
  late final _sel_initWithObjects_1 = _registerName1("initWithObjects:");
  late final _sel_initWithArray_1 = _registerName1("initWithArray:");
  late final _sel_initWithArray_copyItems_1 =
      _registerName1("initWithArray:copyItems:");
  instancetype _objc_msgSend_107(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> array,
    bool flag,
  ) {
    return __objc_msgSend_107(
      obj,
      sel,
      array,
      flag,
    );
  }

  late final __objc_msgSend_107Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_107 = __objc_msgSend_107Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, bool)>();

  late final _sel_initWithContentsOfURL_error_1 =
      _registerName1("initWithContentsOfURL:error:");
  ffi.Pointer<ObjCObject> _objc_msgSend_108(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_108(
      obj,
      sel,
      url,
      error,
    );
  }

  late final __objc_msgSend_108Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_108 = __objc_msgSend_108Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_arrayWithContentsOfURL_error_1 =
      _registerName1("arrayWithContentsOfURL:error:");
  late final _sel_differenceFromArray_withOptions_usingEquivalenceTest_1 =
      _registerName1("differenceFromArray:withOptions:usingEquivalenceTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_109(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> other,
    int options,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_109(
      obj,
      sel,
      other,
      options,
      block,
    );
  }

  late final __objc_msgSend_109Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_109 = __objc_msgSend_109Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_differenceFromArray_withOptions_1 =
      _registerName1("differenceFromArray:withOptions:");
  ffi.Pointer<ObjCObject> _objc_msgSend_110(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> other,
    int options,
  ) {
    return __objc_msgSend_110(
      obj,
      sel,
      other,
      options,
    );
  }

  late final __objc_msgSend_110Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_110 = __objc_msgSend_110Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, int)>();

  late final _sel_differenceFromArray_1 =
      _registerName1("differenceFromArray:");
  late final _sel_arrayByApplyingDifference_1 =
      _registerName1("arrayByApplyingDifference:");
  late final _sel_getObjects_1 = _registerName1("getObjects:");
  void _objc_msgSend_111(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
  ) {
    return __objc_msgSend_111(
      obj,
      sel,
      objects,
    );
  }

  late final __objc_msgSend_111Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_111 = __objc_msgSend_111Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_arrayWithContentsOfFile_1 =
      _registerName1("arrayWithContentsOfFile:");
  ffi.Pointer<ObjCObject> _objc_msgSend_112(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
  ) {
    return __objc_msgSend_112(
      obj,
      sel,
      path,
    );
  }

  late final __objc_msgSend_112Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_112 = __objc_msgSend_112Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_arrayWithContentsOfURL_1 =
      _registerName1("arrayWithContentsOfURL:");
  ffi.Pointer<ObjCObject> _objc_msgSend_113(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
  ) {
    return __objc_msgSend_113(
      obj,
      sel,
      url,
    );
  }

  late final __objc_msgSend_113Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_113 = __objc_msgSend_113Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithContentsOfFile_1 =
      _registerName1("initWithContentsOfFile:");
  late final _sel_initWithContentsOfURL_1 =
      _registerName1("initWithContentsOfURL:");
  late final _sel_writeToFile_atomically_1 =
      _registerName1("writeToFile:atomically:");
  bool _objc_msgSend_114(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    bool useAuxiliaryFile,
  ) {
    return __objc_msgSend_114(
      obj,
      sel,
      path,
      useAuxiliaryFile,
    );
  }

  late final __objc_msgSend_114Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_114 = __objc_msgSend_114Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, bool)>();

  late final _sel_writeToURL_atomically_1 =
      _registerName1("writeToURL:atomically:");
  bool _objc_msgSend_115(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    bool atomically,
  ) {
    return __objc_msgSend_115(
      obj,
      sel,
      url,
      atomically,
    );
  }

  late final __objc_msgSend_115Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_115 = __objc_msgSend_115Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, bool)>();

  late final _sel_decodeArrayOfObjectsOfClass_forKey_1 =
      _registerName1("decodeArrayOfObjectsOfClass:forKey:");
  ffi.Pointer<ObjCObject> _objc_msgSend_116(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> cls,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_116(
      obj,
      sel,
      cls,
      key,
    );
  }

  late final __objc_msgSend_116Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_116 = __objc_msgSend_116Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _class_NSDictionary1 = _getClass1("NSDictionary");
  late final _sel_objectForKey_1 = _registerName1("objectForKey:");
  late final _sel_keyEnumerator1 = _registerName1("keyEnumerator");
  late final _sel_initWithObjects_forKeys_count_1 =
      _registerName1("initWithObjects:forKeys:count:");
  instancetype _objc_msgSend_117(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
    int cnt,
  ) {
    return __objc_msgSend_117(
      obj,
      sel,
      objects,
      keys,
      cnt,
    );
  }

  late final __objc_msgSend_117Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_117 = __objc_msgSend_117Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          int)>();

  late final _sel_allKeys1 = _registerName1("allKeys");
  ffi.Pointer<ObjCObject> _objc_msgSend_118(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_118(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_118Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_118 = __objc_msgSend_118Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_allKeysForObject_1 = _registerName1("allKeysForObject:");
  late final _sel_allValues1 = _registerName1("allValues");
  late final _sel_descriptionInStringsFileFormat1 =
      _registerName1("descriptionInStringsFileFormat");
  late final _sel_isEqualToDictionary_1 =
      _registerName1("isEqualToDictionary:");
  bool _objc_msgSend_119(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherDictionary,
  ) {
    return __objc_msgSend_119(
      obj,
      sel,
      otherDictionary,
    );
  }

  late final __objc_msgSend_119Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_119 = __objc_msgSend_119Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_objectsForKeys_notFoundMarker_1 =
      _registerName1("objectsForKeys:notFoundMarker:");
  ffi.Pointer<ObjCObject> _objc_msgSend_120(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> keys,
    ffi.Pointer<ObjCObject> marker,
  ) {
    return __objc_msgSend_120(
      obj,
      sel,
      keys,
      marker,
    );
  }

  late final __objc_msgSend_120Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_120 = __objc_msgSend_120Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_keysSortedByValueUsingSelector_1 =
      _registerName1("keysSortedByValueUsingSelector:");
  late final _sel_getObjects_andKeys_count_1 =
      _registerName1("getObjects:andKeys:count:");
  void _objc_msgSend_121(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
    int count,
  ) {
    return __objc_msgSend_121(
      obj,
      sel,
      objects,
      keys,
      count,
    );
  }

  late final __objc_msgSend_121Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_121 = __objc_msgSend_121Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          int)>();

  late final _sel_objectForKeyedSubscript_1 =
      _registerName1("objectForKeyedSubscript:");
  late final _sel_enumerateKeysAndObjectsUsingBlock_1 =
      _registerName1("enumerateKeysAndObjectsUsingBlock:");
  void _objc_msgSend_122(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_122(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_122Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_122 = __objc_msgSend_122Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateKeysAndObjectsWithOptions_usingBlock_1 =
      _registerName1("enumerateKeysAndObjectsWithOptions:usingBlock:");
  void _objc_msgSend_123(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_123(
      obj,
      sel,
      opts,
      block,
    );
  }

  late final __objc_msgSend_123Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_123 = __objc_msgSend_123Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_keysSortedByValueUsingComparator_1 =
      _registerName1("keysSortedByValueUsingComparator:");
  late final _sel_keysSortedByValueWithOptions_usingComparator_1 =
      _registerName1("keysSortedByValueWithOptions:usingComparator:");
  late final _sel_keysOfEntriesPassingTest_1 =
      _registerName1("keysOfEntriesPassingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_124(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_124(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_124Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_124 = __objc_msgSend_124Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_keysOfEntriesWithOptions_passingTest_1 =
      _registerName1("keysOfEntriesWithOptions:passingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_125(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_125(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_125Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_125 = __objc_msgSend_125Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_getObjects_andKeys_1 = _registerName1("getObjects:andKeys:");
  void _objc_msgSend_126(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
  ) {
    return __objc_msgSend_126(
      obj,
      sel,
      objects,
      keys,
    );
  }

  late final __objc_msgSend_126Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_126 = __objc_msgSend_126Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_dictionaryWithContentsOfFile_1 =
      _registerName1("dictionaryWithContentsOfFile:");
  ffi.Pointer<ObjCObject> _objc_msgSend_127(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
  ) {
    return __objc_msgSend_127(
      obj,
      sel,
      path,
    );
  }

  late final __objc_msgSend_127Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_127 = __objc_msgSend_127Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_dictionaryWithContentsOfURL_1 =
      _registerName1("dictionaryWithContentsOfURL:");
  ffi.Pointer<ObjCObject> _objc_msgSend_128(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
  ) {
    return __objc_msgSend_128(
      obj,
      sel,
      url,
    );
  }

  late final __objc_msgSend_128Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_128 = __objc_msgSend_128Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_dictionary1 = _registerName1("dictionary");
  late final _sel_dictionaryWithObject_forKey_1 =
      _registerName1("dictionaryWithObject:forKey:");
  instancetype _objc_msgSend_129(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> object,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_129(
      obj,
      sel,
      object,
      key,
    );
  }

  late final __objc_msgSend_129Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_129 = __objc_msgSend_129Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_dictionaryWithObjects_forKeys_count_1 =
      _registerName1("dictionaryWithObjects:forKeys:count:");
  late final _sel_dictionaryWithObjectsAndKeys_1 =
      _registerName1("dictionaryWithObjectsAndKeys:");
  late final _sel_dictionaryWithDictionary_1 =
      _registerName1("dictionaryWithDictionary:");
  instancetype _objc_msgSend_130(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> dict,
  ) {
    return __objc_msgSend_130(
      obj,
      sel,
      dict,
    );
  }

  late final __objc_msgSend_130Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_130 = __objc_msgSend_130Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_dictionaryWithObjects_forKeys_1 =
      _registerName1("dictionaryWithObjects:forKeys:");
  instancetype _objc_msgSend_131(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> objects,
    ffi.Pointer<ObjCObject> keys,
  ) {
    return __objc_msgSend_131(
      obj,
      sel,
      objects,
      keys,
    );
  }

  late final __objc_msgSend_131Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_131 = __objc_msgSend_131Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithObjectsAndKeys_1 =
      _registerName1("initWithObjectsAndKeys:");
  late final _sel_initWithDictionary_1 = _registerName1("initWithDictionary:");
  late final _sel_initWithDictionary_copyItems_1 =
      _registerName1("initWithDictionary:copyItems:");
  instancetype _objc_msgSend_132(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherDictionary,
    bool flag,
  ) {
    return __objc_msgSend_132(
      obj,
      sel,
      otherDictionary,
      flag,
    );
  }

  late final __objc_msgSend_132Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_132 = __objc_msgSend_132Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, bool)>();

  late final _sel_initWithObjects_forKeys_1 =
      _registerName1("initWithObjects:forKeys:");
  ffi.Pointer<ObjCObject> _objc_msgSend_133(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_133(
      obj,
      sel,
      url,
      error,
    );
  }

  late final __objc_msgSend_133Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_133 = __objc_msgSend_133Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_dictionaryWithContentsOfURL_error_1 =
      _registerName1("dictionaryWithContentsOfURL:error:");
  late final _sel_sharedKeySetForKeys_1 =
      _registerName1("sharedKeySetForKeys:");
  late final _sel_countByEnumeratingWithState_objects_count_1 =
      _registerName1("countByEnumeratingWithState:objects:count:");
  int _objc_msgSend_134(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<NSFastEnumerationState> state,
    ffi.Pointer<ffi.Pointer<ObjCObject>> buffer,
    int len,
  ) {
    return __objc_msgSend_134(
      obj,
      sel,
      state,
      buffer,
      len,
    );
  }

  late final __objc_msgSend_134Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<NSFastEnumerationState>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_134 = __objc_msgSend_134Ptr.asFunction<
      int Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<NSFastEnumerationState>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          int)>();

  late final _sel_decodeDictionaryWithKeysOfClass_objectsOfClass_forKey_1 =
      _registerName1("decodeDictionaryWithKeysOfClass:objectsOfClass:forKey:");
  ffi.Pointer<ObjCObject> _objc_msgSend_135(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> keyCls,
    ffi.Pointer<ObjCObject> objectCls,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_135(
      obj,
      sel,
      keyCls,
      objectCls,
      key,
    );
  }

  late final __objc_msgSend_135Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_135 = __objc_msgSend_135Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeObjectOfClasses_forKey_1 =
      _registerName1("decodeObjectOfClasses:forKey:");
  late final _sel_decodeTopLevelObjectOfClasses_forKey_error_1 =
      _registerName1("decodeTopLevelObjectOfClasses:forKey:error:");
  late final _sel_decodeArrayOfObjectsOfClasses_forKey_1 =
      _registerName1("decodeArrayOfObjectsOfClasses:forKey:");
  late final _sel_decodeDictionaryWithKeysOfClasses_objectsOfClasses_forKey_1 =
      _registerName1(
          "decodeDictionaryWithKeysOfClasses:objectsOfClasses:forKey:");
  late final _sel_decodePropertyListForKey_1 =
      _registerName1("decodePropertyListForKey:");
  late final _sel_allowedClasses1 = _registerName1("allowedClasses");
  late final _sel_failWithError_1 = _registerName1("failWithError:");
  void _objc_msgSend_136(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> error,
  ) {
    return __objc_msgSend_136(
      obj,
      sel,
      error,
    );
  }

  late final __objc_msgSend_136Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_136 = __objc_msgSend_136Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodingFailurePolicy1 =
      _registerName1("decodingFailurePolicy");
  int _objc_msgSend_137(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_137(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_137Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_137 = __objc_msgSend_137Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_error1 = _registerName1("error");
  ffi.Pointer<ObjCObject> _objc_msgSend_138(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_138(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_138Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_138 = __objc_msgSend_138Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_encodeNXObject_1 = _registerName1("encodeNXObject:");
  late final _sel_decodeNXObject1 = _registerName1("decodeNXObject");
  late final _sel_decodeValueOfObjCType_at_1 =
      _registerName1("decodeValueOfObjCType:at:");
  late final _sel_encodePoint_1 = _registerName1("encodePoint:");
  void _objc_msgSend_139(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGPoint point,
  ) {
    return __objc_msgSend_139(
      obj,
      sel,
      point,
    );
  }

  late final __objc_msgSend_139Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGPoint)>>('objc_msgSend');
  late final __objc_msgSend_139 = __objc_msgSend_139Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGPoint)>();

  late final _sel_decodePoint1 = _registerName1("decodePoint");
  CGPoint _objc_msgSend_140(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_140(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_140Ptr = _lookup<
      ffi.NativeFunction<
          CGPoint Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_140 = __objc_msgSend_140Ptr.asFunction<
      CGPoint Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_encodeSize_1 = _registerName1("encodeSize:");
  void _objc_msgSend_141(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGSize size,
  ) {
    return __objc_msgSend_141(
      obj,
      sel,
      size,
    );
  }

  late final __objc_msgSend_141Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGSize)>>('objc_msgSend');
  late final __objc_msgSend_141 = __objc_msgSend_141Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGSize)>();

  late final _sel_decodeSize1 = _registerName1("decodeSize");
  CGSize _objc_msgSend_142(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_142(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_142Ptr = _lookup<
      ffi.NativeFunction<
          CGSize Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_142 = __objc_msgSend_142Ptr.asFunction<
      CGSize Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_encodeRect_1 = _registerName1("encodeRect:");
  void _objc_msgSend_143(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect rect,
  ) {
    return __objc_msgSend_143(
      obj,
      sel,
      rect,
    );
  }

  late final __objc_msgSend_143Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGRect)>>('objc_msgSend');
  late final __objc_msgSend_143 = __objc_msgSend_143Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect)>();

  late final _sel_decodeRect1 = _registerName1("decodeRect");
  CGRect _objc_msgSend_144(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_144(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_144Ptr = _lookup<
      ffi.NativeFunction<
          CGRect Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_144 = __objc_msgSend_144Ptr.asFunction<
      CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_encodePoint_forKey_1 = _registerName1("encodePoint:forKey:");
  void _objc_msgSend_145(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGPoint point,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_145(
      obj,
      sel,
      point,
      key,
    );
  }

  late final __objc_msgSend_145Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGPoint, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_145 = __objc_msgSend_145Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGPoint,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeSize_forKey_1 = _registerName1("encodeSize:forKey:");
  void _objc_msgSend_146(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGSize size,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_146(
      obj,
      sel,
      size,
      key,
    );
  }

  late final __objc_msgSend_146Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGSize, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_146 = __objc_msgSend_146Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGSize,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeRect_forKey_1 = _registerName1("encodeRect:forKey:");
  void _objc_msgSend_147(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect rect,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_147(
      obj,
      sel,
      rect,
      key,
    );
  }

  late final __objc_msgSend_147Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGRect, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_147 = __objc_msgSend_147Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodePointForKey_1 = _registerName1("decodePointForKey:");
  CGPoint _objc_msgSend_148(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_148(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_148Ptr = _lookup<
      ffi.NativeFunction<
          CGPoint Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_148 = __objc_msgSend_148Ptr.asFunction<
      CGPoint Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeSizeForKey_1 = _registerName1("decodeSizeForKey:");
  CGSize _objc_msgSend_149(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_149(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_149Ptr = _lookup<
      ffi.NativeFunction<
          CGSize Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_149 = __objc_msgSend_149Ptr.asFunction<
      CGSize Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeRectForKey_1 = _registerName1("decodeRectForKey:");
  CGRect _objc_msgSend_150(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_150(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_150Ptr = _lookup<
      ffi.NativeFunction<
          CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_150 = __objc_msgSend_150Ptr.asFunction<
      CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_replacementObjectForCoder_1 =
      _registerName1("replacementObjectForCoder:");
  late final _sel_awakeAfterUsingCoder_1 =
      _registerName1("awakeAfterUsingCoder:");
  late final _sel_poseAsClass_1 = _registerName1("poseAsClass:");
  late final _sel_autoContentAccessingProxy1 =
      _registerName1("autoContentAccessingProxy");
  late final _class_NSValue1 = _getClass1("NSValue");
  late final _sel_getValue_size_1 = _registerName1("getValue:size:");
  late final _sel_objCType1 = _registerName1("objCType");
  ffi.Pointer<ffi.Char> _objc_msgSend_151(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_151(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_151Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_151 = __objc_msgSend_151Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_initWithBytes_objCType_1 =
      _registerName1("initWithBytes:objCType:");
  instancetype _objc_msgSend_152(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<ffi.Char> type,
  ) {
    return __objc_msgSend_152(
      obj,
      sel,
      value,
      type,
    );
  }

  late final __objc_msgSend_152Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>('objc_msgSend');
  late final __objc_msgSend_152 = __objc_msgSend_152Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  late final _sel_valueWithBytes_objCType_1 =
      _registerName1("valueWithBytes:objCType:");
  ffi.Pointer<ObjCObject> _objc_msgSend_153(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<ffi.Char> type,
  ) {
    return __objc_msgSend_153(
      obj,
      sel,
      value,
      type,
    );
  }

  late final __objc_msgSend_153Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('objc_msgSend');
  late final __objc_msgSend_153 = __objc_msgSend_153Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>)>();

  late final _sel_value_withObjCType_1 = _registerName1("value:withObjCType:");
  late final _sel_valueWithNonretainedObject_1 =
      _registerName1("valueWithNonretainedObject:");
  ffi.Pointer<ObjCObject> _objc_msgSend_154(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
  ) {
    return __objc_msgSend_154(
      obj,
      sel,
      anObject,
    );
  }

  late final __objc_msgSend_154Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_154 = __objc_msgSend_154Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_nonretainedObjectValue1 =
      _registerName1("nonretainedObjectValue");
  late final _sel_valueWithPointer_1 = _registerName1("valueWithPointer:");
  ffi.Pointer<ObjCObject> _objc_msgSend_155(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> pointer,
  ) {
    return __objc_msgSend_155(
      obj,
      sel,
      pointer,
    );
  }

  late final __objc_msgSend_155Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_155 = __objc_msgSend_155Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.Void>)>();

  late final _sel_pointerValue1 = _registerName1("pointerValue");
  late final _sel_isEqualToValue_1 = _registerName1("isEqualToValue:");
  bool _objc_msgSend_156(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_156(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_156Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_156 = __objc_msgSend_156Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_getValue_1 = _registerName1("getValue:");
  void _objc_msgSend_157(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> value,
  ) {
    return __objc_msgSend_157(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_157Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_157 = __objc_msgSend_157Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_valueWithRange_1 = _registerName1("valueWithRange:");
  ffi.Pointer<ObjCObject> _objc_msgSend_158(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_158(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_158Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_158 = __objc_msgSend_158Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange)>();

  late final _sel_rangeValue1 = _registerName1("rangeValue");
  _NSRange _objc_msgSend_159(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_159(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_159Ptr = _lookup<
      ffi.NativeFunction<
          _NSRange Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_159 = __objc_msgSend_159Ptr.asFunction<
      _NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_valueWithPoint_1 = _registerName1("valueWithPoint:");
  ffi.Pointer<ObjCObject> _objc_msgSend_160(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGPoint point,
  ) {
    return __objc_msgSend_160(
      obj,
      sel,
      point,
    );
  }

  late final __objc_msgSend_160Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, CGPoint)>>('objc_msgSend');
  late final __objc_msgSend_160 = __objc_msgSend_160Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGPoint)>();

  late final _sel_valueWithSize_1 = _registerName1("valueWithSize:");
  ffi.Pointer<ObjCObject> _objc_msgSend_161(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGSize size,
  ) {
    return __objc_msgSend_161(
      obj,
      sel,
      size,
    );
  }

  late final __objc_msgSend_161Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, CGSize)>>('objc_msgSend');
  late final __objc_msgSend_161 = __objc_msgSend_161Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGSize)>();

  late final _sel_valueWithRect_1 = _registerName1("valueWithRect:");
  ffi.Pointer<ObjCObject> _objc_msgSend_162(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect rect,
  ) {
    return __objc_msgSend_162(
      obj,
      sel,
      rect,
    );
  }

  late final __objc_msgSend_162Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, CGRect)>>('objc_msgSend');
  late final __objc_msgSend_162 = __objc_msgSend_162Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect)>();

  late final _sel_valueWithEdgeInsets_1 =
      _registerName1("valueWithEdgeInsets:");
  ffi.Pointer<ObjCObject> _objc_msgSend_163(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSEdgeInsets insets,
  ) {
    return __objc_msgSend_163(
      obj,
      sel,
      insets,
    );
  }

  late final __objc_msgSend_163Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSEdgeInsets)>>('objc_msgSend');
  late final __objc_msgSend_163 = __objc_msgSend_163Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSEdgeInsets)>();

  late final _sel_pointValue1 = _registerName1("pointValue");
  late final _sel_sizeValue1 = _registerName1("sizeValue");
  late final _sel_rectValue1 = _registerName1("rectValue");
  late final _sel_edgeInsetsValue1 = _registerName1("edgeInsetsValue");
  NSEdgeInsets _objc_msgSend_164(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_164(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_164Ptr = _lookup<
      ffi.NativeFunction<
          NSEdgeInsets Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_164 = __objc_msgSend_164Ptr.asFunction<
      NSEdgeInsets Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _class_NSNumber1 = _getClass1("NSNumber");
  late final _sel_initWithChar_1 = _registerName1("initWithChar:");
  ffi.Pointer<ObjCObject> _objc_msgSend_165(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_165(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_165Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Char)>>('objc_msgSend');
  late final __objc_msgSend_165 = __objc_msgSend_165Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedChar_1 =
      _registerName1("initWithUnsignedChar:");
  ffi.Pointer<ObjCObject> _objc_msgSend_166(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_166(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_166Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedChar)>>('objc_msgSend');
  late final __objc_msgSend_166 = __objc_msgSend_166Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithShort_1 = _registerName1("initWithShort:");
  ffi.Pointer<ObjCObject> _objc_msgSend_167(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_167(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_167Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Short)>>('objc_msgSend');
  late final __objc_msgSend_167 = __objc_msgSend_167Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedShort_1 =
      _registerName1("initWithUnsignedShort:");
  ffi.Pointer<ObjCObject> _objc_msgSend_168(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_168(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_168Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedShort)>>('objc_msgSend');
  late final __objc_msgSend_168 = __objc_msgSend_168Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithInt_1 = _registerName1("initWithInt:");
  ffi.Pointer<ObjCObject> _objc_msgSend_169(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_169(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_169Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Int)>>('objc_msgSend');
  late final __objc_msgSend_169 = __objc_msgSend_169Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedInt_1 =
      _registerName1("initWithUnsignedInt:");
  ffi.Pointer<ObjCObject> _objc_msgSend_170(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_170(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_170Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedInt)>>('objc_msgSend');
  late final __objc_msgSend_170 = __objc_msgSend_170Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithLong_1 = _registerName1("initWithLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_171(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_171(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_171Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_171 = __objc_msgSend_171Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedLong_1 =
      _registerName1("initWithUnsignedLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_172(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_172(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_172Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_172 = __objc_msgSend_172Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithLongLong_1 = _registerName1("initWithLongLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_173(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_173(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_173Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.LongLong)>>('objc_msgSend');
  late final __objc_msgSend_173 = __objc_msgSend_173Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedLongLong_1 =
      _registerName1("initWithUnsignedLongLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_174(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_174(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_174Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLongLong)>>('objc_msgSend');
  late final __objc_msgSend_174 = __objc_msgSend_174Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithFloat_1 = _registerName1("initWithFloat:");
  ffi.Pointer<ObjCObject> _objc_msgSend_175(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_175(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_175Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Float)>>('objc_msgSend');
  late final __objc_msgSend_175 = __objc_msgSend_175Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final _sel_initWithDouble_1 = _registerName1("initWithDouble:");
  ffi.Pointer<ObjCObject> _objc_msgSend_176(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_176(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_176Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Double)>>('objc_msgSend');
  late final __objc_msgSend_176 = __objc_msgSend_176Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final _sel_initWithBool_1 = _registerName1("initWithBool:");
  ffi.Pointer<ObjCObject> _objc_msgSend_177(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool value,
  ) {
    return __objc_msgSend_177(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_177Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_177 = __objc_msgSend_177Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, bool)>();

  late final _sel_initWithInteger_1 = _registerName1("initWithInteger:");
  late final _sel_initWithUnsignedInteger_1 =
      _registerName1("initWithUnsignedInteger:");
  late final _sel_charValue1 = _registerName1("charValue");
  int _objc_msgSend_178(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_178(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_178Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Char Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_178 = __objc_msgSend_178Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedCharValue1 = _registerName1("unsignedCharValue");
  int _objc_msgSend_179(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_179(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_179Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_179 = __objc_msgSend_179Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_shortValue1 = _registerName1("shortValue");
  int _objc_msgSend_180(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_180(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_180Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_180 = __objc_msgSend_180Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedShortValue1 = _registerName1("unsignedShortValue");
  int _objc_msgSend_181(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_181(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_181Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedShort Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_181 = __objc_msgSend_181Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_intValue1 = _registerName1("intValue");
  int _objc_msgSend_182(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_182(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_182Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_182 = __objc_msgSend_182Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedIntValue1 = _registerName1("unsignedIntValue");
  late final _sel_longValue1 = _registerName1("longValue");
  late final _sel_unsignedLongValue1 = _registerName1("unsignedLongValue");
  late final _sel_longLongValue1 = _registerName1("longLongValue");
  int _objc_msgSend_183(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_183(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_183Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_183 = __objc_msgSend_183Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedLongLongValue1 =
      _registerName1("unsignedLongLongValue");
  int _objc_msgSend_184(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_184(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_184Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_184 = __objc_msgSend_184Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_floatValue1 = _registerName1("floatValue");
  double _objc_msgSend_185(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_185(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_185Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_185 = __objc_msgSend_185Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_doubleValue1 = _registerName1("doubleValue");
  double _objc_msgSend_186(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_186(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_186Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_186 = __objc_msgSend_186Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_boolValue1 = _registerName1("boolValue");
  late final _sel_integerValue1 = _registerName1("integerValue");
  late final _sel_unsignedIntegerValue1 =
      _registerName1("unsignedIntegerValue");
  late final _sel_stringValue1 = _registerName1("stringValue");
  late final _sel_compare_1 = _registerName1("compare:");
  int _objc_msgSend_187(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherNumber,
  ) {
    return __objc_msgSend_187(
      obj,
      sel,
      otherNumber,
    );
  }

  late final __objc_msgSend_187Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_187 = __objc_msgSend_187Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_isEqualToNumber_1 = _registerName1("isEqualToNumber:");
  bool _objc_msgSend_188(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> number,
  ) {
    return __objc_msgSend_188(
      obj,
      sel,
      number,
    );
  }

  late final __objc_msgSend_188Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_188 = __objc_msgSend_188Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_numberWithChar_1 = _registerName1("numberWithChar:");
  late final _sel_numberWithUnsignedChar_1 =
      _registerName1("numberWithUnsignedChar:");
  late final _sel_numberWithShort_1 = _registerName1("numberWithShort:");
  late final _sel_numberWithUnsignedShort_1 =
      _registerName1("numberWithUnsignedShort:");
  late final _sel_numberWithInt_1 = _registerName1("numberWithInt:");
  late final _sel_numberWithUnsignedInt_1 =
      _registerName1("numberWithUnsignedInt:");
  late final _sel_numberWithLong_1 = _registerName1("numberWithLong:");
  late final _sel_numberWithUnsignedLong_1 =
      _registerName1("numberWithUnsignedLong:");
  late final _sel_numberWithLongLong_1 = _registerName1("numberWithLongLong:");
  late final _sel_numberWithUnsignedLongLong_1 =
      _registerName1("numberWithUnsignedLongLong:");
  late final _sel_numberWithFloat_1 = _registerName1("numberWithFloat:");
  late final _sel_numberWithDouble_1 = _registerName1("numberWithDouble:");
  late final _sel_numberWithBool_1 = _registerName1("numberWithBool:");
  late final _sel_numberWithInteger_1 = _registerName1("numberWithInteger:");
  late final _sel_numberWithUnsignedInteger_1 =
      _registerName1("numberWithUnsignedInteger:");
  late final _class_NSMutableArray1 = _getClass1("NSMutableArray");
  late final _sel_addObject_1 = _registerName1("addObject:");
  late final _sel_insertObject_atIndex_1 =
      _registerName1("insertObject:atIndex:");
  void _objc_msgSend_189(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
    int index,
  ) {
    return __objc_msgSend_189(
      obj,
      sel,
      anObject,
      index,
    );
  }

  late final __objc_msgSend_189Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_189 = __objc_msgSend_189Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_removeLastObject1 = _registerName1("removeLastObject");
  late final _sel_removeObjectAtIndex_1 =
      _registerName1("removeObjectAtIndex:");
  void _objc_msgSend_190(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
  ) {
    return __objc_msgSend_190(
      obj,
      sel,
      index,
    );
  }

  late final __objc_msgSend_190Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_190 = __objc_msgSend_190Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_replaceObjectAtIndex_withObject_1 =
      _registerName1("replaceObjectAtIndex:withObject:");
  void _objc_msgSend_191(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
    ffi.Pointer<ObjCObject> anObject,
  ) {
    return __objc_msgSend_191(
      obj,
      sel,
      index,
      anObject,
    );
  }

  late final __objc_msgSend_191Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.UnsignedLong, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_191 = __objc_msgSend_191Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithCapacity_1 = _registerName1("initWithCapacity:");
  late final _sel_addObjectsFromArray_1 =
      _registerName1("addObjectsFromArray:");
  void _objc_msgSend_192(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherArray,
  ) {
    return __objc_msgSend_192(
      obj,
      sel,
      otherArray,
    );
  }

  late final __objc_msgSend_192Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_192 = __objc_msgSend_192Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_exchangeObjectAtIndex_withObjectAtIndex_1 =
      _registerName1("exchangeObjectAtIndex:withObjectAtIndex:");
  void _objc_msgSend_193(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int idx1,
    int idx2,
  ) {
    return __objc_msgSend_193(
      obj,
      sel,
      idx1,
      idx2,
    );
  }

  late final __objc_msgSend_193Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.UnsignedLong, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_193 = __objc_msgSend_193Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, int)>();

  late final _sel_removeAllObjects1 = _registerName1("removeAllObjects");
  late final _sel_removeObject_inRange_1 =
      _registerName1("removeObject:inRange:");
  void _objc_msgSend_194(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
    _NSRange range,
  ) {
    return __objc_msgSend_194(
      obj,
      sel,
      anObject,
      range,
    );
  }

  late final __objc_msgSend_194Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_194 = __objc_msgSend_194Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, _NSRange)>();

  late final _sel_removeObject_1 = _registerName1("removeObject:");
  late final _sel_removeObjectIdenticalTo_inRange_1 =
      _registerName1("removeObjectIdenticalTo:inRange:");
  late final _sel_removeObjectIdenticalTo_1 =
      _registerName1("removeObjectIdenticalTo:");
  late final _sel_removeObjectsFromIndices_numIndices_1 =
      _registerName1("removeObjectsFromIndices:numIndices:");
  void _objc_msgSend_195(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.UnsignedLong> indices,
    int cnt,
  ) {
    return __objc_msgSend_195(
      obj,
      sel,
      indices,
      cnt,
    );
  }

  late final __objc_msgSend_195Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_195 = __objc_msgSend_195Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.UnsignedLong>, int)>();

  late final _sel_removeObjectsInArray_1 =
      _registerName1("removeObjectsInArray:");
  late final _sel_removeObjectsInRange_1 =
      _registerName1("removeObjectsInRange:");
  void _objc_msgSend_196(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_196(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_196Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_196 = __objc_msgSend_196Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange)>();

  late final _sel_replaceObjectsInRange_withObjectsFromArray_range_1 =
      _registerName1("replaceObjectsInRange:withObjectsFromArray:range:");
  void _objc_msgSend_197(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
    ffi.Pointer<ObjCObject> otherArray,
    _NSRange otherRange,
  ) {
    return __objc_msgSend_197(
      obj,
      sel,
      range,
      otherArray,
      otherRange,
    );
  }

  late final __objc_msgSend_197Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              _NSRange, ffi.Pointer<ObjCObject>, _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_197 = __objc_msgSend_197Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange,
          ffi.Pointer<ObjCObject>, _NSRange)>();

  late final _sel_replaceObjectsInRange_withObjectsFromArray_1 =
      _registerName1("replaceObjectsInRange:withObjectsFromArray:");
  void _objc_msgSend_198(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
    ffi.Pointer<ObjCObject> otherArray,
  ) {
    return __objc_msgSend_198(
      obj,
      sel,
      range,
      otherArray,
    );
  }

  late final __objc_msgSend_198Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              _NSRange, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_198 = __objc_msgSend_198Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_setArray_1 = _registerName1("setArray:");
  late final _sel_sortUsingFunction_context_1 =
      _registerName1("sortUsingFunction:context:");
  void _objc_msgSend_199(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Long Function(ffi.Pointer<ObjCObject>,
                    ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>
        compare,
    ffi.Pointer<ffi.Void> context,
  ) {
    return __objc_msgSend_199(
      obj,
      sel,
      compare,
      context,
    );
  }

  late final __objc_msgSend_199Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Long Function(ffi.Pointer<ObjCObject>,
                          ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_199 = __objc_msgSend_199Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Long Function(ffi.Pointer<ObjCObject>,
                      ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_sortUsingSelector_1 = _registerName1("sortUsingSelector:");
  late final _sel_insertObjects_atIndexes_1 =
      _registerName1("insertObjects:atIndexes:");
  void _objc_msgSend_200(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> objects,
    ffi.Pointer<ObjCObject> indexes,
  ) {
    return __objc_msgSend_200(
      obj,
      sel,
      objects,
      indexes,
    );
  }

  late final __objc_msgSend_200Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_200 = __objc_msgSend_200Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_removeObjectsAtIndexes_1 =
      _registerName1("removeObjectsAtIndexes:");
  void _objc_msgSend_201(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> indexes,
  ) {
    return __objc_msgSend_201(
      obj,
      sel,
      indexes,
    );
  }

  late final __objc_msgSend_201Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_201 = __objc_msgSend_201Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_replaceObjectsAtIndexes_withObjects_1 =
      _registerName1("replaceObjectsAtIndexes:withObjects:");
  void _objc_msgSend_202(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> indexes,
    ffi.Pointer<ObjCObject> objects,
  ) {
    return __objc_msgSend_202(
      obj,
      sel,
      indexes,
      objects,
    );
  }

  late final __objc_msgSend_202Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_202 = __objc_msgSend_202Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_setObject_atIndexedSubscript_1 =
      _registerName1("setObject:atIndexedSubscript:");
  late final _sel_sortUsingComparator_1 =
      _registerName1("sortUsingComparator:");
  void _objc_msgSend_203(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> cmptr,
  ) {
    return __objc_msgSend_203(
      obj,
      sel,
      cmptr,
    );
  }

  late final __objc_msgSend_203Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_203 = __objc_msgSend_203Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_sortWithOptions_usingComparator_1 =
      _registerName1("sortWithOptions:usingComparator:");
  void _objc_msgSend_204(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> cmptr,
  ) {
    return __objc_msgSend_204(
      obj,
      sel,
      opts,
      cmptr,
    );
  }

  late final __objc_msgSend_204Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_204 = __objc_msgSend_204Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_arrayWithCapacity_1 = _registerName1("arrayWithCapacity:");
  ffi.Pointer<ObjCObject> _objc_msgSend_205(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
  ) {
    return __objc_msgSend_205(
      obj,
      sel,
      path,
    );
  }

  late final __objc_msgSend_205Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_205 = __objc_msgSend_205Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_206(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
  ) {
    return __objc_msgSend_206(
      obj,
      sel,
      url,
    );
  }

  late final __objc_msgSend_206Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_206 = __objc_msgSend_206Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_applyDifference_1 = _registerName1("applyDifference:");
  late final _class_NSNotification1 = _getClass1("NSNotification");
  late final _sel_name1 = _registerName1("name");
  late final _sel_object1 = _registerName1("object");
  late final _sel_userInfo1 = _registerName1("userInfo");
  ffi.Pointer<ObjCObject> _objc_msgSend_207(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_207(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_207Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_207 = __objc_msgSend_207Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_initWithName_object_userInfo_1 =
      _registerName1("initWithName:object:userInfo:");
  instancetype _objc_msgSend_208(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> name,
    ffi.Pointer<ObjCObject> object,
    ffi.Pointer<ObjCObject> userInfo,
  ) {
    return __objc_msgSend_208(
      obj,
      sel,
      name,
      object,
      userInfo,
    );
  }

  late final __objc_msgSend_208Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_208 = __objc_msgSend_208Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_notificationWithName_object_1 =
      _registerName1("notificationWithName:object:");
  instancetype _objc_msgSend_209(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aName,
    ffi.Pointer<ObjCObject> anObject,
  ) {
    return __objc_msgSend_209(
      obj,
      sel,
      aName,
      anObject,
    );
  }

  late final __objc_msgSend_209Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_209 = __objc_msgSend_209Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_notificationWithName_object_userInfo_1 =
      _registerName1("notificationWithName:object:userInfo:");
  late final _class_NSDate1 = _getClass1("NSDate");
  late final _sel_timeIntervalSinceReferenceDate1 =
      _registerName1("timeIntervalSinceReferenceDate");
  late final _sel_initWithTimeIntervalSinceReferenceDate_1 =
      _registerName1("initWithTimeIntervalSinceReferenceDate:");
  instancetype _objc_msgSend_210(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double ti,
  ) {
    return __objc_msgSend_210(
      obj,
      sel,
      ti,
    );
  }

  late final __objc_msgSend_210Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Double)>>('objc_msgSend');
  late final __objc_msgSend_210 = __objc_msgSend_210Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final _sel_timeIntervalSinceDate_1 =
      _registerName1("timeIntervalSinceDate:");
  double _objc_msgSend_211(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anotherDate,
  ) {
    return __objc_msgSend_211(
      obj,
      sel,
      anotherDate,
    );
  }

  late final __objc_msgSend_211Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_211 = __objc_msgSend_211Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_timeIntervalSinceNow1 =
      _registerName1("timeIntervalSinceNow");
  late final _sel_timeIntervalSince19701 =
      _registerName1("timeIntervalSince1970");
  late final _sel_addTimeInterval_1 = _registerName1("addTimeInterval:");
  late final _sel_dateByAddingTimeInterval_1 =
      _registerName1("dateByAddingTimeInterval:");
  late final _sel_earlierDate_1 = _registerName1("earlierDate:");
  ffi.Pointer<ObjCObject> _objc_msgSend_212(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anotherDate,
  ) {
    return __objc_msgSend_212(
      obj,
      sel,
      anotherDate,
    );
  }

  late final __objc_msgSend_212Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_212 = __objc_msgSend_212Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_laterDate_1 = _registerName1("laterDate:");
  int _objc_msgSend_213(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> other,
  ) {
    return __objc_msgSend_213(
      obj,
      sel,
      other,
    );
  }

  late final __objc_msgSend_213Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_213 = __objc_msgSend_213Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_isEqualToDate_1 = _registerName1("isEqualToDate:");
  bool _objc_msgSend_214(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherDate,
  ) {
    return __objc_msgSend_214(
      obj,
      sel,
      otherDate,
    );
  }

  late final __objc_msgSend_214Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_214 = __objc_msgSend_214Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_date1 = _registerName1("date");
  late final _sel_dateWithTimeIntervalSinceNow_1 =
      _registerName1("dateWithTimeIntervalSinceNow:");
  late final _sel_dateWithTimeIntervalSinceReferenceDate_1 =
      _registerName1("dateWithTimeIntervalSinceReferenceDate:");
  late final _sel_dateWithTimeIntervalSince1970_1 =
      _registerName1("dateWithTimeIntervalSince1970:");
  late final _sel_dateWithTimeInterval_sinceDate_1 =
      _registerName1("dateWithTimeInterval:sinceDate:");
  instancetype _objc_msgSend_215(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double secsToBeAdded,
    ffi.Pointer<ObjCObject> date,
  ) {
    return __objc_msgSend_215(
      obj,
      sel,
      secsToBeAdded,
      date,
    );
  }

  late final __objc_msgSend_215Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Double, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_215 = __objc_msgSend_215Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          double, ffi.Pointer<ObjCObject>)>();

  late final _sel_distantFuture1 = _registerName1("distantFuture");
  ffi.Pointer<ObjCObject> _objc_msgSend_216(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_216(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_216Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_216 = __objc_msgSend_216Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_distantPast1 = _registerName1("distantPast");
  late final _sel_now1 = _registerName1("now");
  late final _sel_initWithTimeIntervalSinceNow_1 =
      _registerName1("initWithTimeIntervalSinceNow:");
  late final _sel_initWithTimeIntervalSince1970_1 =
      _registerName1("initWithTimeIntervalSince1970:");
  late final _sel_initWithTimeInterval_sinceDate_1 =
      _registerName1("initWithTimeInterval:sinceDate:");
  late final _class_NSMutableDictionary1 = _getClass1("NSMutableDictionary");
  late final _sel_removeObjectForKey_1 = _registerName1("removeObjectForKey:");
  late final _sel_setObject_forKey_1 = _registerName1("setObject:forKey:");
  void _objc_msgSend_217(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
    ffi.Pointer<ObjCObject> aKey,
  ) {
    return __objc_msgSend_217(
      obj,
      sel,
      anObject,
      aKey,
    );
  }

  late final __objc_msgSend_217Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_217 = __objc_msgSend_217Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_addEntriesFromDictionary_1 =
      _registerName1("addEntriesFromDictionary:");
  void _objc_msgSend_218(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherDictionary,
  ) {
    return __objc_msgSend_218(
      obj,
      sel,
      otherDictionary,
    );
  }

  late final __objc_msgSend_218Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_218 = __objc_msgSend_218Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_removeObjectsForKeys_1 =
      _registerName1("removeObjectsForKeys:");
  late final _sel_setDictionary_1 = _registerName1("setDictionary:");
  late final _sel_setObject_forKeyedSubscript_1 =
      _registerName1("setObject:forKeyedSubscript:");
  late final _sel_dictionaryWithCapacity_1 =
      _registerName1("dictionaryWithCapacity:");
  ffi.Pointer<ObjCObject> _objc_msgSend_219(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
  ) {
    return __objc_msgSend_219(
      obj,
      sel,
      path,
    );
  }

  late final __objc_msgSend_219Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_219 = __objc_msgSend_219Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_220(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
  ) {
    return __objc_msgSend_220(
      obj,
      sel,
      url,
    );
  }

  late final __objc_msgSend_220Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_220 = __objc_msgSend_220Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_dictionaryWithSharedKeySet_1 =
      _registerName1("dictionaryWithSharedKeySet:");
  ffi.Pointer<ObjCObject> _objc_msgSend_221(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> keyset,
  ) {
    return __objc_msgSend_221(
      obj,
      sel,
      keyset,
    );
  }

  late final __objc_msgSend_221Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_221 = __objc_msgSend_221Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _class_NSScreen1 = _getClass1("NSScreen");
  late final _sel_screens1 = _registerName1("screens");
  late final _sel_mainScreen1 = _registerName1("mainScreen");
  ffi.Pointer<ObjCObject> _objc_msgSend_222(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_222(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_222Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_222 = __objc_msgSend_222Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_deepestScreen1 = _registerName1("deepestScreen");
  late final _sel_screensHaveSeparateSpaces1 =
      _registerName1("screensHaveSeparateSpaces");
  late final _sel_depth1 = _registerName1("depth");
  int _objc_msgSend_223(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_223(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_223Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_223 = __objc_msgSend_223Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_frame1 = _registerName1("frame");
  late final _sel_visibleFrame1 = _registerName1("visibleFrame");
  late final _sel_deviceDescription1 = _registerName1("deviceDescription");
  late final _class_NSColorSpace1 = _getClass1("NSColorSpace");
  late final _sel_colorSpace1 = _registerName1("colorSpace");
  ffi.Pointer<ObjCObject> _objc_msgSend_224(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_224(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_224Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_224 = __objc_msgSend_224Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_supportedWindowDepths1 =
      _registerName1("supportedWindowDepths");
  ffi.Pointer<ffi.Int32> _objc_msgSend_225(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_225(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_225Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int32> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_225 = __objc_msgSend_225Ptr.asFunction<
      ffi.Pointer<ffi.Int32> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_canRepresentDisplayGamut_1 =
      _registerName1("canRepresentDisplayGamut:");
  bool _objc_msgSend_226(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int displayGamut,
  ) {
    return __objc_msgSend_226(
      obj,
      sel,
      displayGamut,
    );
  }

  late final __objc_msgSend_226Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_226 = __objc_msgSend_226Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_convertRectToBacking_1 =
      _registerName1("convertRectToBacking:");
  CGRect _objc_msgSend_227(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect rect,
  ) {
    return __objc_msgSend_227(
      obj,
      sel,
      rect,
    );
  }

  late final __objc_msgSend_227Ptr = _lookup<
      ffi.NativeFunction<
          CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGRect)>>('objc_msgSend');
  late final __objc_msgSend_227 = __objc_msgSend_227Ptr.asFunction<
      CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect)>();

  late final _sel_convertRectFromBacking_1 =
      _registerName1("convertRectFromBacking:");
  late final _sel_backingAlignedRect_options_1 =
      _registerName1("backingAlignedRect:options:");
  CGRect _objc_msgSend_228(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect rect,
    int options,
  ) {
    return __objc_msgSend_228(
      obj,
      sel,
      rect,
      options,
    );
  }

  late final __objc_msgSend_228Ptr = _lookup<
      ffi.NativeFunction<
          CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_228 = __objc_msgSend_228Ptr.asFunction<
      CGRect Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect, int)>();

  late final _sel_backingScaleFactor1 = _registerName1("backingScaleFactor");
  late final _sel_localizedName1 = _registerName1("localizedName");
  late final _sel_safeAreaInsets1 = _registerName1("safeAreaInsets");
  late final _sel_auxiliaryTopLeftArea1 =
      _registerName1("auxiliaryTopLeftArea");
  late final _sel_auxiliaryTopRightArea1 =
      _registerName1("auxiliaryTopRightArea");
  late final _sel_maximumExtendedDynamicRangeColorComponentValue1 =
      _registerName1("maximumExtendedDynamicRangeColorComponentValue");
  late final _sel_maximumPotentialExtendedDynamicRangeColorComponentValue1 =
      _registerName1("maximumPotentialExtendedDynamicRangeColorComponentValue");
  late final _sel_maximumReferenceExtendedDynamicRangeColorComponentValue1 =
      _registerName1("maximumReferenceExtendedDynamicRangeColorComponentValue");
  late final _sel_maximumFramesPerSecond1 =
      _registerName1("maximumFramesPerSecond");
  late final _sel_minimumRefreshInterval1 =
      _registerName1("minimumRefreshInterval");
  late final _sel_maximumRefreshInterval1 =
      _registerName1("maximumRefreshInterval");
  late final _sel_displayUpdateGranularity1 =
      _registerName1("displayUpdateGranularity");
  late final _sel_lastDisplayUpdateTimestamp1 =
      _registerName1("lastDisplayUpdateTimestamp");
  late final _sel_userSpaceScaleFactor1 =
      _registerName1("userSpaceScaleFactor");
}

class _ObjCWrapper implements ffi.Finalizable {
  final ffi.Pointer<ObjCObject> _id;
  final NativeMacOsFramework _lib;
  bool _pendingRelease;

  _ObjCWrapper._(this._id, this._lib,
      {bool retain = false, bool release = false})
      : _pendingRelease = release {
    if (retain) {
      _lib._objc_retain(_id.cast());
    }
    if (release) {
      _lib._objc_releaseFinalizer2.attach(this, _id.cast(), detach: this);
    }
  }

  /// Releases the reference to the underlying ObjC object held by this wrapper.
  /// Throws a StateError if this wrapper doesn't currently hold a reference.
  void release() {
    if (_pendingRelease) {
      _pendingRelease = false;
      _lib._objc_release(_id.cast());
      _lib._objc_releaseFinalizer2.detach(this);
    } else {
      throw StateError(
          'Released an ObjC object that was unowned or already released.');
    }
  }

  @override
  bool operator ==(Object other) {
    return other is _ObjCWrapper && _id == other._id;
  }

  @override
  int get hashCode => _id.hashCode;

  /// Return a pointer to this object.
  ffi.Pointer<ObjCObject> get pointer => _id;
}

class NSObject extends _ObjCWrapper {
  NSObject._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSObject] that points to the same underlying object as [other].
  static NSObject castFrom<T extends _ObjCWrapper>(T other) {
    return NSObject._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSObject] that wraps the given raw object pointer.
  static NSObject castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSObject._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSObject].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSObject1);
  }

  static void load(NativeMacOsFramework _lib) {
    return _lib._objc_msgSend_1(_lib._class_NSObject1, _lib._sel_load1);
  }

  static void initialize(NativeMacOsFramework _lib) {
    return _lib._objc_msgSend_1(_lib._class_NSObject1, _lib._sel_initialize1);
  }

  NSObject init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject new1(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_new1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject allocWithZone_(
      NativeMacOsFramework _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSObject1, _lib._sel_allocWithZone_1, zone);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject alloc(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_alloc1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  void dealloc() {
    return _lib._objc_msgSend_1(_id, _lib._sel_dealloc1);
  }

  void finalize() {
    return _lib._objc_msgSend_1(_id, _lib._sel_finalize1);
  }

  NSObject copy() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_copy1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  NSObject mutableCopy() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_mutableCopy1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject copyWithZone_(
      NativeMacOsFramework _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSObject1, _lib._sel_copyWithZone_1, zone);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject mutableCopyWithZone_(
      NativeMacOsFramework _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSObject1, _lib._sel_mutableCopyWithZone_1, zone);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static bool instancesRespondToSelector_(
      NativeMacOsFramework _lib, ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_4(_lib._class_NSObject1,
        _lib._sel_instancesRespondToSelector_1, aSelector);
  }

  static bool conformsToProtocol_(
      NativeMacOsFramework _lib, Protocol? protocol) {
    return _lib._objc_msgSend_5(_lib._class_NSObject1,
        _lib._sel_conformsToProtocol_1, protocol?._id ?? ffi.nullptr);
  }

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> methodForSelector_(
      ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_6(_id, _lib._sel_methodForSelector_1, aSelector);
  }

  static ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      instanceMethodForSelector_(
          NativeMacOsFramework _lib, ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_6(_lib._class_NSObject1,
        _lib._sel_instanceMethodForSelector_1, aSelector);
  }

  void doesNotRecognizeSelector_(ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_7(
        _id, _lib._sel_doesNotRecognizeSelector_1, aSelector);
  }

  NSObject forwardingTargetForSelector_(ffi.Pointer<ObjCSel> aSelector) {
    final _ret = _lib._objc_msgSend_8(
        _id, _lib._sel_forwardingTargetForSelector_1, aSelector);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void forwardInvocation_(NSInvocation? anInvocation) {
    return _lib._objc_msgSend_9(
        _id, _lib._sel_forwardInvocation_1, anInvocation?._id ?? ffi.nullptr);
  }

  NSMethodSignature methodSignatureForSelector_(
      ffi.Pointer<ObjCSel> aSelector) {
    final _ret = _lib._objc_msgSend_10(
        _id, _lib._sel_methodSignatureForSelector_1, aSelector);
    return NSMethodSignature._(_ret, _lib, retain: true, release: true);
  }

  static NSMethodSignature instanceMethodSignatureForSelector_(
      NativeMacOsFramework _lib, ffi.Pointer<ObjCSel> aSelector) {
    final _ret = _lib._objc_msgSend_10(_lib._class_NSObject1,
        _lib._sel_instanceMethodSignatureForSelector_1, aSelector);
    return NSMethodSignature._(_ret, _lib, retain: true, release: true);
  }

  bool allowsWeakReference() {
    return _lib._objc_msgSend_11(_id, _lib._sel_allowsWeakReference1);
  }

  bool retainWeakReference() {
    return _lib._objc_msgSend_11(_id, _lib._sel_retainWeakReference1);
  }

  static bool isSubclassOfClass_(NativeMacOsFramework _lib, NSObject aClass) {
    return _lib._objc_msgSend_0(
        _lib._class_NSObject1, _lib._sel_isSubclassOfClass_1, aClass._id);
  }

  static bool resolveClassMethod_(
      NativeMacOsFramework _lib, ffi.Pointer<ObjCSel> sel) {
    return _lib._objc_msgSend_4(
        _lib._class_NSObject1, _lib._sel_resolveClassMethod_1, sel);
  }

  static bool resolveInstanceMethod_(
      NativeMacOsFramework _lib, ffi.Pointer<ObjCSel> sel) {
    return _lib._objc_msgSend_4(
        _lib._class_NSObject1, _lib._sel_resolveInstanceMethod_1, sel);
  }

  static int hash(NativeMacOsFramework _lib) {
    return _lib._objc_msgSend_12(_lib._class_NSObject1, _lib._sel_hash1);
  }

  static NSObject superclass(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_superclass1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject class1(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_class1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSString description(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_17(_lib._class_NSObject1, _lib._sel_description1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString debugDescription(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_17(
        _lib._class_NSObject1, _lib._sel_debugDescription1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static int version(NativeMacOsFramework _lib) {
    return _lib._objc_msgSend_18(_lib._class_NSObject1, _lib._sel_version1);
  }

  static void setVersion_(NativeMacOsFramework _lib, int aVersion) {
    return _lib._objc_msgSend_19(
        _lib._class_NSObject1, _lib._sel_setVersion_1, aVersion);
  }

  NSObject get classForCoder {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_classForCoder1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject replacementObjectForCoder_(NSCoder? coder) {
    final _ret = _lib._objc_msgSend_55(
        _id, _lib._sel_replacementObjectForCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject awakeAfterUsingCoder_(NSCoder? coder) {
    final _ret = _lib._objc_msgSend_55(
        _id, _lib._sel_awakeAfterUsingCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static void poseAsClass_(NativeMacOsFramework _lib, NSObject aClass) {
    return _lib._objc_msgSend_25(
        _lib._class_NSObject1, _lib._sel_poseAsClass_1, aClass._id);
  }

  NSObject get autoContentAccessingProxy {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_autoContentAccessingProxy1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

final class ObjCSel extends ffi.Opaque {}

final class ObjCObject extends ffi.Opaque {}

typedef instancetype = ffi.Pointer<ObjCObject>;

final class _NSZone extends ffi.Opaque {}

class Protocol extends _ObjCWrapper {
  Protocol._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [Protocol] that points to the same underlying object as [other].
  static Protocol castFrom<T extends _ObjCWrapper>(T other) {
    return Protocol._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [Protocol] that wraps the given raw object pointer.
  static Protocol castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return Protocol._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [Protocol].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_Protocol1);
  }
}

class NSInvocation extends _ObjCWrapper {
  NSInvocation._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSInvocation] that points to the same underlying object as [other].
  static NSInvocation castFrom<T extends _ObjCWrapper>(T other) {
    return NSInvocation._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSInvocation] that wraps the given raw object pointer.
  static NSInvocation castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSInvocation._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSInvocation].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSInvocation1);
  }
}

class NSMethodSignature extends _ObjCWrapper {
  NSMethodSignature._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMethodSignature] that points to the same underlying object as [other].
  static NSMethodSignature castFrom<T extends _ObjCWrapper>(T other) {
    return NSMethodSignature._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSMethodSignature] that wraps the given raw object pointer.
  static NSMethodSignature castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMethodSignature._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMethodSignature].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSMethodSignature1);
  }
}

class NSString extends _ObjCWrapper {
  NSString._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSString] that points to the same underlying object as [other].
  static NSString castFrom<T extends _ObjCWrapper>(T other) {
    return NSString._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSString] that wraps the given raw object pointer.
  static NSString castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSString._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSString].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSString1);
  }

  factory NSString(NativeMacOsFramework _lib, String str) {
    final cstr = str.toNativeUtf16();
    final nsstr = stringWithCharacters_length_(_lib, cstr.cast(), str.length);
    pkg_ffi.calloc.free(cstr);
    return nsstr;
  }

  @override
  String toString() {
    final data =
        dataUsingEncoding_(0x94000100 /* NSUTF16LittleEndianStringEncoding */);
    return data.bytes.cast<pkg_ffi.Utf16>().toDartString(length: length);
  }

  static NSString stringWithCharacters_length_(NativeMacOsFramework _lib,
      ffi.Pointer<ffi.WChar> characters, int length) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSString1,
        _lib._sel_stringWithCharacters_length_1, characters, length);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSData dataUsingEncoding_(int encoding) {
    final _ret =
        _lib._objc_msgSend_15(_id, _lib._sel_dataUsingEncoding_1, encoding);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  int get length {
    return _lib._objc_msgSend_16(_id, _lib._sel_length1);
  }
}

extension StringToNSString on String {
  NSString toNSString(NativeMacOsFramework lib) => NSString(lib, this);
}

class NSData extends _ObjCWrapper {
  NSData._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSData] that points to the same underlying object as [other].
  static NSData castFrom<T extends _ObjCWrapper>(T other) {
    return NSData._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSData] that wraps the given raw object pointer.
  static NSData castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSData._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSData].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSData1);
  }

  ffi.Pointer<ffi.Void> get bytes {
    return _lib._objc_msgSend_14(_id, _lib._sel_bytes1);
  }
}

class NSCoder extends NSObject {
  NSCoder._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSCoder] that points to the same underlying object as [other].
  static NSCoder castFrom<T extends _ObjCWrapper>(T other) {
    return NSCoder._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSCoder] that wraps the given raw object pointer.
  static NSCoder castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSCoder._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSCoder].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSCoder1);
  }

  void encodeValueOfObjCType_at_(
      ffi.Pointer<ffi.Char> type, ffi.Pointer<ffi.Void> addr) {
    return _lib._objc_msgSend_20(
        _id, _lib._sel_encodeValueOfObjCType_at_1, type, addr);
  }

  void encodeDataObject_(NSData? data) {
    return _lib._objc_msgSend_21(
        _id, _lib._sel_encodeDataObject_1, data?._id ?? ffi.nullptr);
  }

  NSData decodeDataObject() {
    final _ret = _lib._objc_msgSend_22(_id, _lib._sel_decodeDataObject1);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  void decodeValueOfObjCType_at_size_(
      ffi.Pointer<ffi.Char> type, ffi.Pointer<ffi.Void> data, int size) {
    return _lib._objc_msgSend_23(
        _id, _lib._sel_decodeValueOfObjCType_at_size_1, type, data, size);
  }

  int versionForClassName_(NSString? className) {
    return _lib._objc_msgSend_24(
        _id, _lib._sel_versionForClassName_1, className?._id ?? ffi.nullptr);
  }

  void encodeObject_(NSObject object) {
    return _lib._objc_msgSend_25(_id, _lib._sel_encodeObject_1, object._id);
  }

  void encodeRootObject_(NSObject rootObject) {
    return _lib._objc_msgSend_25(
        _id, _lib._sel_encodeRootObject_1, rootObject._id);
  }

  void encodeBycopyObject_(NSObject anObject) {
    return _lib._objc_msgSend_25(
        _id, _lib._sel_encodeBycopyObject_1, anObject._id);
  }

  void encodeByrefObject_(NSObject anObject) {
    return _lib._objc_msgSend_25(
        _id, _lib._sel_encodeByrefObject_1, anObject._id);
  }

  void encodeConditionalObject_(NSObject object) {
    return _lib._objc_msgSend_25(
        _id, _lib._sel_encodeConditionalObject_1, object._id);
  }

  void encodeValuesOfObjCTypes_(ffi.Pointer<ffi.Char> types) {
    return _lib._objc_msgSend_26(
        _id, _lib._sel_encodeValuesOfObjCTypes_1, types);
  }

  void encodeArrayOfObjCType_count_at_(
      ffi.Pointer<ffi.Char> type, int count, ffi.Pointer<ffi.Void> array) {
    return _lib._objc_msgSend_27(
        _id, _lib._sel_encodeArrayOfObjCType_count_at_1, type, count, array);
  }

  void encodeBytes_length_(ffi.Pointer<ffi.Void> byteaddr, int length) {
    return _lib._objc_msgSend_28(
        _id, _lib._sel_encodeBytes_length_1, byteaddr, length);
  }

  NSObject decodeObject() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_decodeObject1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject decodeTopLevelObjectAndReturnError_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_29(
        _id, _lib._sel_decodeTopLevelObjectAndReturnError_1, error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void decodeValuesOfObjCTypes_(ffi.Pointer<ffi.Char> types) {
    return _lib._objc_msgSend_26(
        _id, _lib._sel_decodeValuesOfObjCTypes_1, types);
  }

  void decodeArrayOfObjCType_count_at_(
      ffi.Pointer<ffi.Char> itemType, int count, ffi.Pointer<ffi.Void> array) {
    return _lib._objc_msgSend_27(_id,
        _lib._sel_decodeArrayOfObjCType_count_at_1, itemType, count, array);
  }

  ffi.Pointer<ffi.Void> decodeBytesWithReturnedLength_(
      ffi.Pointer<ffi.UnsignedLong> lengthp) {
    return _lib._objc_msgSend_30(
        _id, _lib._sel_decodeBytesWithReturnedLength_1, lengthp);
  }

  void encodePropertyList_(NSObject aPropertyList) {
    return _lib._objc_msgSend_25(
        _id, _lib._sel_encodePropertyList_1, aPropertyList._id);
  }

  NSObject decodePropertyList() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_decodePropertyList1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void setObjectZone_(ffi.Pointer<_NSZone> zone) {
    return _lib._objc_msgSend_31(_id, _lib._sel_setObjectZone_1, zone);
  }

  ffi.Pointer<_NSZone> objectZone() {
    return _lib._objc_msgSend_32(_id, _lib._sel_objectZone1);
  }

  int get systemVersion {
    return _lib._objc_msgSend_16(_id, _lib._sel_systemVersion1);
  }

  bool get allowsKeyedCoding {
    return _lib._objc_msgSend_11(_id, _lib._sel_allowsKeyedCoding1);
  }

  void encodeObject_forKey_(NSObject object, NSString? key) {
    return _lib._objc_msgSend_33(_id, _lib._sel_encodeObject_forKey_1,
        object._id, key?._id ?? ffi.nullptr);
  }

  void encodeConditionalObject_forKey_(NSObject object, NSString? key) {
    return _lib._objc_msgSend_33(
        _id,
        _lib._sel_encodeConditionalObject_forKey_1,
        object._id,
        key?._id ?? ffi.nullptr);
  }

  void encodeBool_forKey_(bool value, NSString? key) {
    return _lib._objc_msgSend_34(
        _id, _lib._sel_encodeBool_forKey_1, value, key?._id ?? ffi.nullptr);
  }

  void encodeInt_forKey_(int value, NSString? key) {
    return _lib._objc_msgSend_35(
        _id, _lib._sel_encodeInt_forKey_1, value, key?._id ?? ffi.nullptr);
  }

  void encodeInt32_forKey_(int value, NSString? key) {
    return _lib._objc_msgSend_36(
        _id, _lib._sel_encodeInt32_forKey_1, value, key?._id ?? ffi.nullptr);
  }

  void encodeInt64_forKey_(int value, NSString? key) {
    return _lib._objc_msgSend_37(
        _id, _lib._sel_encodeInt64_forKey_1, value, key?._id ?? ffi.nullptr);
  }

  void encodeFloat_forKey_(double value, NSString? key) {
    return _lib._objc_msgSend_38(
        _id, _lib._sel_encodeFloat_forKey_1, value, key?._id ?? ffi.nullptr);
  }

  void encodeDouble_forKey_(double value, NSString? key) {
    return _lib._objc_msgSend_39(
        _id, _lib._sel_encodeDouble_forKey_1, value, key?._id ?? ffi.nullptr);
  }

  void encodeBytes_length_forKey_(
      ffi.Pointer<ffi.Uint8> bytes, int length, NSString? key) {
    return _lib._objc_msgSend_40(_id, _lib._sel_encodeBytes_length_forKey_1,
        bytes, length, key?._id ?? ffi.nullptr);
  }

  bool containsValueForKey_(NSString? key) {
    return _lib._objc_msgSend_41(
        _id, _lib._sel_containsValueForKey_1, key?._id ?? ffi.nullptr);
  }

  NSObject decodeObjectForKey_(NSString? key) {
    final _ret = _lib._objc_msgSend_42(
        _id, _lib._sel_decodeObjectForKey_1, key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject decodeTopLevelObjectForKey_error_(
      NSString? key, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_43(
        _id,
        _lib._sel_decodeTopLevelObjectForKey_error_1,
        key?._id ?? ffi.nullptr,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool decodeBoolForKey_(NSString? key) {
    return _lib._objc_msgSend_41(
        _id, _lib._sel_decodeBoolForKey_1, key?._id ?? ffi.nullptr);
  }

  int decodeIntForKey_(NSString? key) {
    return _lib._objc_msgSend_44(
        _id, _lib._sel_decodeIntForKey_1, key?._id ?? ffi.nullptr);
  }

  int decodeInt32ForKey_(NSString? key) {
    return _lib._objc_msgSend_45(
        _id, _lib._sel_decodeInt32ForKey_1, key?._id ?? ffi.nullptr);
  }

  int decodeInt64ForKey_(NSString? key) {
    return _lib._objc_msgSend_46(
        _id, _lib._sel_decodeInt64ForKey_1, key?._id ?? ffi.nullptr);
  }

  double decodeFloatForKey_(NSString? key) {
    return _lib._objc_msgSend_47(
        _id, _lib._sel_decodeFloatForKey_1, key?._id ?? ffi.nullptr);
  }

  double decodeDoubleForKey_(NSString? key) {
    return _lib._objc_msgSend_48(
        _id, _lib._sel_decodeDoubleForKey_1, key?._id ?? ffi.nullptr);
  }

  ffi.Pointer<ffi.Uint8> decodeBytesForKey_returnedLength_(
      NSString? key, ffi.Pointer<ffi.UnsignedLong> lengthp) {
    return _lib._objc_msgSend_49(
        _id,
        _lib._sel_decodeBytesForKey_returnedLength_1,
        key?._id ?? ffi.nullptr,
        lengthp);
  }

  void encodeInteger_forKey_(int value, NSString? key) {
    return _lib._objc_msgSend_50(
        _id, _lib._sel_encodeInteger_forKey_1, value, key?._id ?? ffi.nullptr);
  }

  int decodeIntegerForKey_(NSString? key) {
    return _lib._objc_msgSend_24(
        _id, _lib._sel_decodeIntegerForKey_1, key?._id ?? ffi.nullptr);
  }

  bool get requiresSecureCoding {
    return _lib._objc_msgSend_11(_id, _lib._sel_requiresSecureCoding1);
  }

  NSObject decodeObjectOfClass_forKey_(NSObject aClass, NSString? key) {
    final _ret = _lib._objc_msgSend_51(
        _id,
        _lib._sel_decodeObjectOfClass_forKey_1,
        aClass._id,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject decodeTopLevelObjectOfClass_forKey_error_(NSObject aClass,
      NSString? key, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_52(
        _id,
        _lib._sel_decodeTopLevelObjectOfClass_forKey_error_1,
        aClass._id,
        key?._id ?? ffi.nullptr,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSArray decodeArrayOfObjectsOfClass_forKey_(NSObject cls, NSString? key) {
    final _ret = _lib._objc_msgSend_116(
        _id,
        _lib._sel_decodeArrayOfObjectsOfClass_forKey_1,
        cls._id,
        key?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary decodeDictionaryWithKeysOfClass_objectsOfClass_forKey_(
      NSObject keyCls, NSObject objectCls, NSString? key) {
    final _ret = _lib._objc_msgSend_135(
        _id,
        _lib._sel_decodeDictionaryWithKeysOfClass_objectsOfClass_forKey_1,
        keyCls._id,
        objectCls._id,
        key?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSObject decodeObjectOfClasses_forKey_(NSObject? classes, NSString? key) {
    final _ret = _lib._objc_msgSend_51(
        _id,
        _lib._sel_decodeObjectOfClasses_forKey_1,
        classes?._id ?? ffi.nullptr,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject decodeTopLevelObjectOfClasses_forKey_error_(NSObject? classes,
      NSString? key, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_52(
        _id,
        _lib._sel_decodeTopLevelObjectOfClasses_forKey_error_1,
        classes?._id ?? ffi.nullptr,
        key?._id ?? ffi.nullptr,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSArray decodeArrayOfObjectsOfClasses_forKey_(
      NSObject? classes, NSString? key) {
    final _ret = _lib._objc_msgSend_116(
        _id,
        _lib._sel_decodeArrayOfObjectsOfClasses_forKey_1,
        classes?._id ?? ffi.nullptr,
        key?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary decodeDictionaryWithKeysOfClasses_objectsOfClasses_forKey_(
      NSObject? keyClasses, NSObject? objectClasses, NSString? key) {
    final _ret = _lib._objc_msgSend_135(
        _id,
        _lib._sel_decodeDictionaryWithKeysOfClasses_objectsOfClasses_forKey_1,
        keyClasses?._id ?? ffi.nullptr,
        objectClasses?._id ?? ffi.nullptr,
        key?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSObject decodePropertyListForKey_(NSString? key) {
    final _ret = _lib._objc_msgSend_42(
        _id, _lib._sel_decodePropertyListForKey_1, key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get allowedClasses {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_allowedClasses1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void failWithError_(NSError? error) {
    return _lib._objc_msgSend_136(
        _id, _lib._sel_failWithError_1, error?._id ?? ffi.nullptr);
  }

  int get decodingFailurePolicy {
    return _lib._objc_msgSend_137(_id, _lib._sel_decodingFailurePolicy1);
  }

  NSError? get error {
    final _ret = _lib._objc_msgSend_138(_id, _lib._sel_error1);
    return _ret.address == 0
        ? null
        : NSError._(_ret, _lib, retain: true, release: true);
  }

  void encodeNXObject_(NSObject object) {
    return _lib._objc_msgSend_25(_id, _lib._sel_encodeNXObject_1, object._id);
  }

  NSObject decodeNXObject() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_decodeNXObject1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void decodeValueOfObjCType_at_(
      ffi.Pointer<ffi.Char> type, ffi.Pointer<ffi.Void> data) {
    return _lib._objc_msgSend_20(
        _id, _lib._sel_decodeValueOfObjCType_at_1, type, data);
  }

  void encodePoint_(CGPoint point) {
    return _lib._objc_msgSend_139(_id, _lib._sel_encodePoint_1, point);
  }

  CGPoint decodePoint() {
    return _lib._objc_msgSend_140(_id, _lib._sel_decodePoint1);
  }

  void encodeSize_(CGSize size) {
    return _lib._objc_msgSend_141(_id, _lib._sel_encodeSize_1, size);
  }

  CGSize decodeSize() {
    return _lib._objc_msgSend_142(_id, _lib._sel_decodeSize1);
  }

  void encodeRect_(CGRect rect) {
    return _lib._objc_msgSend_143(_id, _lib._sel_encodeRect_1, rect);
  }

  CGRect decodeRect() {
    return _lib._objc_msgSend_144(_id, _lib._sel_decodeRect1);
  }

  void encodePoint_forKey_(CGPoint point, NSString? key) {
    return _lib._objc_msgSend_145(
        _id, _lib._sel_encodePoint_forKey_1, point, key?._id ?? ffi.nullptr);
  }

  void encodeSize_forKey_(CGSize size, NSString? key) {
    return _lib._objc_msgSend_146(
        _id, _lib._sel_encodeSize_forKey_1, size, key?._id ?? ffi.nullptr);
  }

  void encodeRect_forKey_(CGRect rect, NSString? key) {
    return _lib._objc_msgSend_147(
        _id, _lib._sel_encodeRect_forKey_1, rect, key?._id ?? ffi.nullptr);
  }

  CGPoint decodePointForKey_(NSString? key) {
    return _lib._objc_msgSend_148(
        _id, _lib._sel_decodePointForKey_1, key?._id ?? ffi.nullptr);
  }

  CGSize decodeSizeForKey_(NSString? key) {
    return _lib._objc_msgSend_149(
        _id, _lib._sel_decodeSizeForKey_1, key?._id ?? ffi.nullptr);
  }

  CGRect decodeRectForKey_(NSString? key) {
    return _lib._objc_msgSend_150(
        _id, _lib._sel_decodeRectForKey_1, key?._id ?? ffi.nullptr);
  }

  static NSCoder new1(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSCoder1, _lib._sel_new1);
    return NSCoder._(_ret, _lib, retain: false, release: true);
  }

  static NSCoder alloc(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSCoder1, _lib._sel_alloc1);
    return NSCoder._(_ret, _lib, retain: false, release: true);
  }
}

class NSError extends _ObjCWrapper {
  NSError._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSError] that points to the same underlying object as [other].
  static NSError castFrom<T extends _ObjCWrapper>(T other) {
    return NSError._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSError] that wraps the given raw object pointer.
  static NSError castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSError._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSError].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSError1);
  }
}

class NSArray extends NSObject {
  NSArray._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSArray] that points to the same underlying object as [other].
  static NSArray castFrom<T extends _ObjCWrapper>(T other) {
    return NSArray._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSArray] that wraps the given raw object pointer.
  static NSArray castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSArray._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSArray].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSArray1);
  }

  int get count {
    return _lib._objc_msgSend_12(_id, _lib._sel_count1);
  }

  NSObject objectAtIndex_(int index) {
    final _ret = _lib._objc_msgSend_53(_id, _lib._sel_objectAtIndex_1, index);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSArray init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithObjects_count_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int cnt) {
    final _ret = _lib._objc_msgSend_54(
        _id, _lib._sel_initWithObjects_count_1, objects, cnt);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithCoder_(NSCoder? coder) {
    final _ret = _lib._objc_msgSend_55(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray arrayByAddingObject_(NSObject anObject) {
    final _ret = _lib._objc_msgSend_56(
        _id, _lib._sel_arrayByAddingObject_1, anObject._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray arrayByAddingObjectsFromArray_(NSArray? otherArray) {
    final _ret = _lib._objc_msgSend_57(
        _id,
        _lib._sel_arrayByAddingObjectsFromArray_1,
        otherArray?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString componentsJoinedByString_(NSString? separator) {
    final _ret = _lib._objc_msgSend_58(_id,
        _lib._sel_componentsJoinedByString_1, separator?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  bool containsObject_(NSObject anObject) {
    return _lib._objc_msgSend_0(_id, _lib._sel_containsObject_1, anObject._id);
  }

  NSString? get description {
    final _ret = _lib._objc_msgSend_17(_id, _lib._sel_description1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithLocale_(NSObject locale) {
    final _ret = _lib._objc_msgSend_59(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithLocale_indent_(NSObject locale, int level) {
    final _ret = _lib._objc_msgSend_60(
        _id, _lib._sel_descriptionWithLocale_indent_1, locale._id, level);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSObject firstObjectCommonWithArray_(NSArray? otherArray) {
    final _ret = _lib._objc_msgSend_61(_id,
        _lib._sel_firstObjectCommonWithArray_1, otherArray?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void getObjects_range_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, _NSRange range) {
    return _lib._objc_msgSend_62(
        _id, _lib._sel_getObjects_range_1, objects, range);
  }

  int indexOfObject_(NSObject anObject) {
    return _lib._objc_msgSend_63(_id, _lib._sel_indexOfObject_1, anObject._id);
  }

  int indexOfObject_inRange_(NSObject anObject, _NSRange range) {
    return _lib._objc_msgSend_64(
        _id, _lib._sel_indexOfObject_inRange_1, anObject._id, range);
  }

  int indexOfObjectIdenticalTo_(NSObject anObject) {
    return _lib._objc_msgSend_63(
        _id, _lib._sel_indexOfObjectIdenticalTo_1, anObject._id);
  }

  int indexOfObjectIdenticalTo_inRange_(NSObject anObject, _NSRange range) {
    return _lib._objc_msgSend_64(
        _id, _lib._sel_indexOfObjectIdenticalTo_inRange_1, anObject._id, range);
  }

  bool isEqualToArray_(NSArray? otherArray) {
    return _lib._objc_msgSend_65(
        _id, _lib._sel_isEqualToArray_1, otherArray?._id ?? ffi.nullptr);
  }

  NSObject get firstObject {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_firstObject1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject get lastObject {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_lastObject1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSEnumerator objectEnumerator() {
    final _ret = _lib._objc_msgSend_66(_id, _lib._sel_objectEnumerator1);
    return NSEnumerator._(_ret, _lib, retain: true, release: true);
  }

  NSEnumerator reverseObjectEnumerator() {
    final _ret = _lib._objc_msgSend_66(_id, _lib._sel_reverseObjectEnumerator1);
    return NSEnumerator._(_ret, _lib, retain: true, release: true);
  }

  NSData? get sortedArrayHint {
    final _ret = _lib._objc_msgSend_22(_id, _lib._sel_sortedArrayHint1);
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  NSArray sortedArrayUsingFunction_context_(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Long Function(ffi.Pointer<ObjCObject>,
                      ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>
          comparator,
      ffi.Pointer<ffi.Void> context) {
    final _ret = _lib._objc_msgSend_67(
        _id, _lib._sel_sortedArrayUsingFunction_context_1, comparator, context);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray sortedArrayUsingFunction_context_hint_(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Long Function(ffi.Pointer<ObjCObject>,
                      ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>
          comparator,
      ffi.Pointer<ffi.Void> context,
      NSData? hint) {
    final _ret = _lib._objc_msgSend_68(
        _id,
        _lib._sel_sortedArrayUsingFunction_context_hint_1,
        comparator,
        context,
        hint?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray sortedArrayUsingSelector_(ffi.Pointer<ObjCSel> comparator) {
    final _ret = _lib._objc_msgSend_69(
        _id, _lib._sel_sortedArrayUsingSelector_1, comparator);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray subarrayWithRange_(_NSRange range) {
    final _ret =
        _lib._objc_msgSend_70(_id, _lib._sel_subarrayWithRange_1, range);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  bool writeToURL_error_(
      NSURL? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_71(
        _id, _lib._sel_writeToURL_error_1, url?._id ?? ffi.nullptr, error);
  }

  void makeObjectsPerformSelector_(ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_7(
        _id, _lib._sel_makeObjectsPerformSelector_1, aSelector);
  }

  void makeObjectsPerformSelector_withObject_(
      ffi.Pointer<ObjCSel> aSelector, NSObject argument) {
    return _lib._objc_msgSend_72(
        _id,
        _lib._sel_makeObjectsPerformSelector_withObject_1,
        aSelector,
        argument._id);
  }

  NSArray objectsAtIndexes_(NSIndexSet? indexes) {
    final _ret = _lib._objc_msgSend_93(
        _id, _lib._sel_objectsAtIndexes_1, indexes?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSObject objectAtIndexedSubscript_(int idx) {
    final _ret =
        _lib._objc_msgSend_53(_id, _lib._sel_objectAtIndexedSubscript_1, idx);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void enumerateObjectsUsingBlock_(ObjCBlock3 block) {
    return _lib._objc_msgSend_94(
        _id, _lib._sel_enumerateObjectsUsingBlock_1, block._id);
  }

  void enumerateObjectsWithOptions_usingBlock_(int opts, ObjCBlock3 block) {
    return _lib._objc_msgSend_95(_id,
        _lib._sel_enumerateObjectsWithOptions_usingBlock_1, opts, block._id);
  }

  void enumerateObjectsAtIndexes_options_usingBlock_(
      NSIndexSet? s, int opts, ObjCBlock3 block) {
    return _lib._objc_msgSend_96(
        _id,
        _lib._sel_enumerateObjectsAtIndexes_options_usingBlock_1,
        s?._id ?? ffi.nullptr,
        opts,
        block._id);
  }

  int indexOfObjectPassingTest_(ObjCBlock4 predicate) {
    return _lib._objc_msgSend_97(
        _id, _lib._sel_indexOfObjectPassingTest_1, predicate._id);
  }

  int indexOfObjectWithOptions_passingTest_(int opts, ObjCBlock4 predicate) {
    return _lib._objc_msgSend_98(_id,
        _lib._sel_indexOfObjectWithOptions_passingTest_1, opts, predicate._id);
  }

  int indexOfObjectAtIndexes_options_passingTest_(
      NSIndexSet? s, int opts, ObjCBlock4 predicate) {
    return _lib._objc_msgSend_99(
        _id,
        _lib._sel_indexOfObjectAtIndexes_options_passingTest_1,
        s?._id ?? ffi.nullptr,
        opts,
        predicate._id);
  }

  NSIndexSet indexesOfObjectsPassingTest_(ObjCBlock4 predicate) {
    final _ret = _lib._objc_msgSend_100(
        _id, _lib._sel_indexesOfObjectsPassingTest_1, predicate._id);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet indexesOfObjectsWithOptions_passingTest_(
      int opts, ObjCBlock4 predicate) {
    final _ret = _lib._objc_msgSend_101(
        _id,
        _lib._sel_indexesOfObjectsWithOptions_passingTest_1,
        opts,
        predicate._id);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet indexesOfObjectsAtIndexes_options_passingTest_(
      NSIndexSet? s, int opts, ObjCBlock4 predicate) {
    final _ret = _lib._objc_msgSend_102(
        _id,
        _lib._sel_indexesOfObjectsAtIndexes_options_passingTest_1,
        s?._id ?? ffi.nullptr,
        opts,
        predicate._id);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSArray sortedArrayUsingComparator_(ObjCBlock5 cmptr) {
    final _ret = _lib._objc_msgSend_103(
        _id, _lib._sel_sortedArrayUsingComparator_1, cmptr._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray sortedArrayWithOptions_usingComparator_(int opts, ObjCBlock5 cmptr) {
    final _ret = _lib._objc_msgSend_104(_id,
        _lib._sel_sortedArrayWithOptions_usingComparator_1, opts, cmptr._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  int indexOfObject_inSortedRange_options_usingComparator_(
      NSObject obj, _NSRange r, int opts, ObjCBlock5 cmp) {
    return _lib._objc_msgSend_105(
        _id,
        _lib._sel_indexOfObject_inSortedRange_options_usingComparator_1,
        obj._id,
        r,
        opts,
        cmp._id);
  }

  static NSArray array(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSArray1, _lib._sel_array1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithObject_(
      NativeMacOsFramework _lib, NSObject anObject) {
    final _ret = _lib._objc_msgSend_106(
        _lib._class_NSArray1, _lib._sel_arrayWithObject_1, anObject._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithObjects_count_(NativeMacOsFramework _lib,
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int cnt) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_NSArray1, _lib._sel_arrayWithObjects_count_1, objects, cnt);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithObjects_(
      NativeMacOsFramework _lib, NSObject firstObj) {
    final _ret = _lib._objc_msgSend_106(
        _lib._class_NSArray1, _lib._sel_arrayWithObjects_1, firstObj._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithArray_(NativeMacOsFramework _lib, NSArray? array) {
    final _ret = _lib._objc_msgSend_61(_lib._class_NSArray1,
        _lib._sel_arrayWithArray_1, array?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithObjects_(NSObject firstObj) {
    final _ret =
        _lib._objc_msgSend_106(_id, _lib._sel_initWithObjects_1, firstObj._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithArray_(NSArray? array) {
    final _ret = _lib._objc_msgSend_61(
        _id, _lib._sel_initWithArray_1, array?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithArray_copyItems_(NSArray? array, bool flag) {
    final _ret = _lib._objc_msgSend_107(_id,
        _lib._sel_initWithArray_copyItems_1, array?._id ?? ffi.nullptr, flag);
    return NSArray._(_ret, _lib, retain: false, release: true);
  }

  NSArray initWithContentsOfURL_error_(
      NSURL? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_108(
        _id,
        _lib._sel_initWithContentsOfURL_error_1,
        url?._id ?? ffi.nullptr,
        error);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithContentsOfURL_error_(NativeMacOsFramework _lib,
      NSURL? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_108(
        _lib._class_NSArray1,
        _lib._sel_arrayWithContentsOfURL_error_1,
        url?._id ?? ffi.nullptr,
        error);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSObject differenceFromArray_withOptions_usingEquivalenceTest_(
      NSArray? other, int options, ObjCBlock6 block) {
    final _ret = _lib._objc_msgSend_109(
        _id,
        _lib._sel_differenceFromArray_withOptions_usingEquivalenceTest_1,
        other?._id ?? ffi.nullptr,
        options,
        block._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject differenceFromArray_withOptions_(NSArray? other, int options) {
    final _ret = _lib._objc_msgSend_110(
        _id,
        _lib._sel_differenceFromArray_withOptions_1,
        other?._id ?? ffi.nullptr,
        options);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject differenceFromArray_(NSArray? other) {
    final _ret = _lib._objc_msgSend_61(
        _id, _lib._sel_differenceFromArray_1, other?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSArray arrayByApplyingDifference_(NSObject? difference) {
    final _ret = _lib._objc_msgSend_56(_id,
        _lib._sel_arrayByApplyingDifference_1, difference?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  void getObjects_(ffi.Pointer<ffi.Pointer<ObjCObject>> objects) {
    return _lib._objc_msgSend_111(_id, _lib._sel_getObjects_1, objects);
  }

  static NSArray arrayWithContentsOfFile_(
      NativeMacOsFramework _lib, NSString? path) {
    final _ret = _lib._objc_msgSend_112(_lib._class_NSArray1,
        _lib._sel_arrayWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithContentsOfURL_(
      NativeMacOsFramework _lib, NSURL? url) {
    final _ret = _lib._objc_msgSend_113(_lib._class_NSArray1,
        _lib._sel_arrayWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithContentsOfFile_(NSString? path) {
    final _ret = _lib._objc_msgSend_112(
        _id, _lib._sel_initWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithContentsOfURL_(NSURL? url) {
    final _ret = _lib._objc_msgSend_113(
        _id, _lib._sel_initWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  bool writeToFile_atomically_(NSString? path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_114(_id, _lib._sel_writeToFile_atomically_1,
        path?._id ?? ffi.nullptr, useAuxiliaryFile);
  }

  bool writeToURL_atomically_(NSURL? url, bool atomically) {
    return _lib._objc_msgSend_115(_id, _lib._sel_writeToURL_atomically_1,
        url?._id ?? ffi.nullptr, atomically);
  }

  static NSArray new1(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSArray1, _lib._sel_new1);
    return NSArray._(_ret, _lib, retain: false, release: true);
  }

  static NSArray alloc(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSArray1, _lib._sel_alloc1);
    return NSArray._(_ret, _lib, retain: false, release: true);
  }
}

final class _NSRange extends ffi.Struct {
  @ffi.UnsignedLong()
  external int location;

  @ffi.UnsignedLong()
  external int length;
}

class NSEnumerator extends NSObject {
  NSEnumerator._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSEnumerator] that points to the same underlying object as [other].
  static NSEnumerator castFrom<T extends _ObjCWrapper>(T other) {
    return NSEnumerator._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSEnumerator] that wraps the given raw object pointer.
  static NSEnumerator castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSEnumerator._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSEnumerator].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSEnumerator1);
  }

  NSObject nextObject() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_nextObject1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get allObjects {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_allObjects1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSEnumerator new1(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSEnumerator1, _lib._sel_new1);
    return NSEnumerator._(_ret, _lib, retain: false, release: true);
  }

  static NSEnumerator alloc(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSEnumerator1, _lib._sel_alloc1);
    return NSEnumerator._(_ret, _lib, retain: false, release: true);
  }
}

class NSURL extends _ObjCWrapper {
  NSURL._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSURL] that points to the same underlying object as [other].
  static NSURL castFrom<T extends _ObjCWrapper>(T other) {
    return NSURL._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSURL] that wraps the given raw object pointer.
  static NSURL castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSURL._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURL].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSURL1);
  }
}

class NSIndexSet extends NSObject {
  NSIndexSet._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSIndexSet] that points to the same underlying object as [other].
  static NSIndexSet castFrom<T extends _ObjCWrapper>(T other) {
    return NSIndexSet._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSIndexSet] that wraps the given raw object pointer.
  static NSIndexSet castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSIndexSet._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSIndexSet].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSIndexSet1);
  }

  static NSIndexSet indexSet(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSIndexSet1, _lib._sel_indexSet1);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  static NSIndexSet indexSetWithIndex_(NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_53(
        _lib._class_NSIndexSet1, _lib._sel_indexSetWithIndex_1, value);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  static NSIndexSet indexSetWithIndexesInRange_(
      NativeMacOsFramework _lib, _NSRange range) {
    final _ret = _lib._objc_msgSend_73(
        _lib._class_NSIndexSet1, _lib._sel_indexSetWithIndexesInRange_1, range);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet initWithIndexesInRange_(_NSRange range) {
    final _ret =
        _lib._objc_msgSend_73(_id, _lib._sel_initWithIndexesInRange_1, range);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet initWithIndexSet_(NSIndexSet? indexSet) {
    final _ret = _lib._objc_msgSend_74(
        _id, _lib._sel_initWithIndexSet_1, indexSet?._id ?? ffi.nullptr);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet initWithIndex_(int value) {
    final _ret = _lib._objc_msgSend_53(_id, _lib._sel_initWithIndex_1, value);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  bool isEqualToIndexSet_(NSIndexSet? indexSet) {
    return _lib._objc_msgSend_75(
        _id, _lib._sel_isEqualToIndexSet_1, indexSet?._id ?? ffi.nullptr);
  }

  int get count {
    return _lib._objc_msgSend_12(_id, _lib._sel_count1);
  }

  int get firstIndex {
    return _lib._objc_msgSend_12(_id, _lib._sel_firstIndex1);
  }

  int get lastIndex {
    return _lib._objc_msgSend_12(_id, _lib._sel_lastIndex1);
  }

  int indexGreaterThanIndex_(int value) {
    return _lib._objc_msgSend_76(_id, _lib._sel_indexGreaterThanIndex_1, value);
  }

  int indexLessThanIndex_(int value) {
    return _lib._objc_msgSend_76(_id, _lib._sel_indexLessThanIndex_1, value);
  }

  int indexGreaterThanOrEqualToIndex_(int value) {
    return _lib._objc_msgSend_76(
        _id, _lib._sel_indexGreaterThanOrEqualToIndex_1, value);
  }

  int indexLessThanOrEqualToIndex_(int value) {
    return _lib._objc_msgSend_76(
        _id, _lib._sel_indexLessThanOrEqualToIndex_1, value);
  }

  int getIndexes_maxCount_inIndexRange_(
      ffi.Pointer<ffi.UnsignedLong> indexBuffer,
      int bufferSize,
      ffi.Pointer<_NSRange> range) {
    return _lib._objc_msgSend_77(
        _id,
        _lib._sel_getIndexes_maxCount_inIndexRange_1,
        indexBuffer,
        bufferSize,
        range);
  }

  int countOfIndexesInRange_(_NSRange range) {
    return _lib._objc_msgSend_78(_id, _lib._sel_countOfIndexesInRange_1, range);
  }

  bool containsIndex_(int value) {
    return _lib._objc_msgSend_79(_id, _lib._sel_containsIndex_1, value);
  }

  bool containsIndexesInRange_(_NSRange range) {
    return _lib._objc_msgSend_80(
        _id, _lib._sel_containsIndexesInRange_1, range);
  }

  bool containsIndexes_(NSIndexSet? indexSet) {
    return _lib._objc_msgSend_75(
        _id, _lib._sel_containsIndexes_1, indexSet?._id ?? ffi.nullptr);
  }

  bool intersectsIndexesInRange_(_NSRange range) {
    return _lib._objc_msgSend_80(
        _id, _lib._sel_intersectsIndexesInRange_1, range);
  }

  void enumerateIndexesUsingBlock_(ObjCBlock block) {
    return _lib._objc_msgSend_81(
        _id, _lib._sel_enumerateIndexesUsingBlock_1, block._id);
  }

  void enumerateIndexesWithOptions_usingBlock_(int opts, ObjCBlock block) {
    return _lib._objc_msgSend_82(_id,
        _lib._sel_enumerateIndexesWithOptions_usingBlock_1, opts, block._id);
  }

  void enumerateIndexesInRange_options_usingBlock_(
      _NSRange range, int opts, ObjCBlock block) {
    return _lib._objc_msgSend_83(
        _id,
        _lib._sel_enumerateIndexesInRange_options_usingBlock_1,
        range,
        opts,
        block._id);
  }

  int indexPassingTest_(ObjCBlock1 predicate) {
    return _lib._objc_msgSend_84(
        _id, _lib._sel_indexPassingTest_1, predicate._id);
  }

  int indexWithOptions_passingTest_(int opts, ObjCBlock1 predicate) {
    return _lib._objc_msgSend_85(
        _id, _lib._sel_indexWithOptions_passingTest_1, opts, predicate._id);
  }

  int indexInRange_options_passingTest_(
      _NSRange range, int opts, ObjCBlock1 predicate) {
    return _lib._objc_msgSend_86(
        _id,
        _lib._sel_indexInRange_options_passingTest_1,
        range,
        opts,
        predicate._id);
  }

  NSIndexSet indexesPassingTest_(ObjCBlock1 predicate) {
    final _ret = _lib._objc_msgSend_87(
        _id, _lib._sel_indexesPassingTest_1, predicate._id);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet indexesWithOptions_passingTest_(int opts, ObjCBlock1 predicate) {
    final _ret = _lib._objc_msgSend_88(
        _id, _lib._sel_indexesWithOptions_passingTest_1, opts, predicate._id);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet indexesInRange_options_passingTest_(
      _NSRange range, int opts, ObjCBlock1 predicate) {
    final _ret = _lib._objc_msgSend_89(
        _id,
        _lib._sel_indexesInRange_options_passingTest_1,
        range,
        opts,
        predicate._id);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  void enumerateRangesUsingBlock_(ObjCBlock2 block) {
    return _lib._objc_msgSend_90(
        _id, _lib._sel_enumerateRangesUsingBlock_1, block._id);
  }

  void enumerateRangesWithOptions_usingBlock_(int opts, ObjCBlock2 block) {
    return _lib._objc_msgSend_91(_id,
        _lib._sel_enumerateRangesWithOptions_usingBlock_1, opts, block._id);
  }

  void enumerateRangesInRange_options_usingBlock_(
      _NSRange range, int opts, ObjCBlock2 block) {
    return _lib._objc_msgSend_92(
        _id,
        _lib._sel_enumerateRangesInRange_options_usingBlock_1,
        range,
        opts,
        block._id);
  }

  static NSIndexSet new1(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSIndexSet1, _lib._sel_new1);
    return NSIndexSet._(_ret, _lib, retain: false, release: true);
  }

  static NSIndexSet alloc(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSIndexSet1, _lib._sel_alloc1);
    return NSIndexSet._(_ret, _lib, retain: false, release: true);
  }
}

class _ObjCBlockBase implements ffi.Finalizable {
  final ffi.Pointer<_ObjCBlock> _id;
  final NativeMacOsFramework _lib;
  bool _pendingRelease;

  _ObjCBlockBase._(this._id, this._lib,
      {bool retain = false, bool release = false})
      : _pendingRelease = release {
    if (retain) {
      _lib._Block_copy(_id.cast());
    }
    if (release) {
      _lib._objc_releaseFinalizer11.attach(this, _id.cast(), detach: this);
    }
  }

  /// Releases the reference to the underlying ObjC block held by this wrapper.
  /// Throws a StateError if this wrapper doesn't currently hold a reference.
  void release() {
    if (_pendingRelease) {
      _pendingRelease = false;
      _lib._Block_release(_id.cast());
      _lib._objc_releaseFinalizer11.detach(this);
    } else {
      throw StateError(
          'Released an ObjC block that was unowned or already released.');
    }
  }

  @override
  bool operator ==(Object other) {
    return other is _ObjCBlockBase && _id == other._id;
  }

  @override
  int get hashCode => _id.hashCode;

  /// Return a pointer to this object.
  ffi.Pointer<_ObjCBlock> get pointer => _id;
}

void _ObjCBlock_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, int arg0, ffi.Pointer<ffi.Bool> arg1) {
  return block.ref.target
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.UnsignedLong arg0, ffi.Pointer<ffi.Bool> arg1)>>()
          .asFunction<void Function(int arg0, ffi.Pointer<ffi.Bool> arg1)>()(
      arg0, arg1);
}

final _ObjCBlock_closureRegistry = <int, Function>{};
int _ObjCBlock_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_registerClosure(Function fn) {
  final id = ++_ObjCBlock_closureRegistryIndex;
  _ObjCBlock_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block, int arg0, ffi.Pointer<ffi.Bool> arg1) {
  return _ObjCBlock_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock extends _ObjCBlockBase {
  ObjCBlock._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.UnsignedLong arg0, ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.UnsignedLong arg0,
                                ffi.Pointer<ffi.Bool> arg1)>(
                        _ObjCBlock_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock.fromFunction(NativeMacOsFramework lib,
      void Function(int arg0, ffi.Pointer<ffi.Bool> arg1) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.UnsignedLong arg0,
                                ffi.Pointer<ffi.Bool> arg1)>(
                        _ObjCBlock_closureTrampoline)
                    .cast(),
                _ObjCBlock_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  void call(int arg0, ffi.Pointer<ffi.Bool> arg1) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                    ffi.UnsignedLong arg0, ffi.Pointer<ffi.Bool> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<_ObjCBlock> block, int arg0,
                ffi.Pointer<ffi.Bool> arg1)>()(_id, arg0, arg1);
  }
}

final class _ObjCBlockDesc extends ffi.Struct {
  @ffi.UnsignedLong()
  external int reserved;

  @ffi.UnsignedLong()
  external int size;

  external ffi.Pointer<ffi.Void> copy_helper;

  external ffi.Pointer<ffi.Void> dispose_helper;

  external ffi.Pointer<ffi.Char> signature;
}

final class _ObjCBlock extends ffi.Struct {
  external ffi.Pointer<ffi.Void> isa;

  @ffi.Int()
  external int flags;

  @ffi.Int()
  external int reserved;

  external ffi.Pointer<ffi.Void> invoke;

  external ffi.Pointer<_ObjCBlockDesc> descriptor;

  external ffi.Pointer<ffi.Void> target;
}

abstract class NSEnumerationOptions {
  static const int NSEnumerationConcurrent = 1;
  static const int NSEnumerationReverse = 2;
}

bool _ObjCBlock1_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, int arg0, ffi.Pointer<ffi.Bool> arg1) {
  return block.ref.target
          .cast<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.UnsignedLong arg0, ffi.Pointer<ffi.Bool> arg1)>>()
          .asFunction<bool Function(int arg0, ffi.Pointer<ffi.Bool> arg1)>()(
      arg0, arg1);
}

final _ObjCBlock1_closureRegistry = <int, Function>{};
int _ObjCBlock1_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock1_registerClosure(Function fn) {
  final id = ++_ObjCBlock1_closureRegistryIndex;
  _ObjCBlock1_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock1_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block, int arg0, ffi.Pointer<ffi.Bool> arg1) {
  return _ObjCBlock1_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock1 extends _ObjCBlockBase {
  ObjCBlock1._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock1.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.UnsignedLong arg0, ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.UnsignedLong arg0,
                                ffi.Pointer<ffi.Bool> arg1)>(
                        _ObjCBlock1_fnPtrTrampoline, false)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock1.fromFunction(NativeMacOsFramework lib,
      bool Function(int arg0, ffi.Pointer<ffi.Bool> arg1) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.UnsignedLong arg0,
                                ffi.Pointer<ffi.Bool> arg1)>(
                        _ObjCBlock1_closureTrampoline, false)
                    .cast(),
                _ObjCBlock1_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  bool call(int arg0, ffi.Pointer<ffi.Bool> arg1) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(ffi.Pointer<_ObjCBlock> block,
                    ffi.UnsignedLong arg0, ffi.Pointer<ffi.Bool> arg1)>>()
        .asFunction<
            bool Function(ffi.Pointer<_ObjCBlock> block, int arg0,
                ffi.Pointer<ffi.Bool> arg1)>()(_id, arg0, arg1);
  }
}

void _ObjCBlock2_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, _NSRange arg0, ffi.Pointer<ffi.Bool> arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(_NSRange arg0, ffi.Pointer<ffi.Bool> arg1)>>()
      .asFunction<
          void Function(
              _NSRange arg0, ffi.Pointer<ffi.Bool> arg1)>()(arg0, arg1);
}

final _ObjCBlock2_closureRegistry = <int, Function>{};
int _ObjCBlock2_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock2_registerClosure(Function fn) {
  final id = ++_ObjCBlock2_closureRegistryIndex;
  _ObjCBlock2_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock2_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block, _NSRange arg0, ffi.Pointer<ffi.Bool> arg1) {
  return _ObjCBlock2_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock2 extends _ObjCBlockBase {
  ObjCBlock2._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock2.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(_NSRange arg0, ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                                _NSRange arg0, ffi.Pointer<ffi.Bool> arg1)>(
                        _ObjCBlock2_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock2.fromFunction(NativeMacOsFramework lib,
      void Function(_NSRange arg0, ffi.Pointer<ffi.Bool> arg1) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                                _NSRange arg0, ffi.Pointer<ffi.Bool> arg1)>(
                        _ObjCBlock2_closureTrampoline)
                    .cast(),
                _ObjCBlock2_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  void call(_NSRange arg0, ffi.Pointer<ffi.Bool> arg1) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<_ObjCBlock> block, _NSRange arg0,
                    ffi.Pointer<ffi.Bool> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<_ObjCBlock> block, _NSRange arg0,
                ffi.Pointer<ffi.Bool> arg1)>()(_id, arg0, arg1);
  }
}

void _ObjCBlock3_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                  ffi.UnsignedLong arg1, ffi.Pointer<ffi.Bool> arg2)>>()
      .asFunction<
          void Function(ffi.Pointer<ObjCObject> arg0, int arg1,
              ffi.Pointer<ffi.Bool> arg2)>()(arg0, arg1, arg2);
}

final _ObjCBlock3_closureRegistry = <int, Function>{};
int _ObjCBlock3_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock3_registerClosure(Function fn) {
  final id = ++_ObjCBlock3_closureRegistryIndex;
  _ObjCBlock3_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock3_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) {
  return _ObjCBlock3_closureRegistry[block.ref.target.address]!(
      arg0, arg1, arg2);
}

class ObjCBlock3 extends _ObjCBlockBase {
  ObjCBlock3._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock3.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi
              .NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.UnsignedLong arg1, ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.UnsignedLong arg1,
                                ffi.Pointer<ffi.Bool> arg2)>(
                        _ObjCBlock3_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock3.fromFunction(
      NativeMacOsFramework lib,
      void Function(ffi.Pointer<ObjCObject> arg0, int arg1,
              ffi.Pointer<ffi.Bool> arg2)
          fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.UnsignedLong arg1,
                                ffi.Pointer<ffi.Bool> arg2)>(
                        _ObjCBlock3_closureTrampoline)
                    .cast(),
                _ObjCBlock3_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  void call(
      ffi.Pointer<ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.UnsignedLong arg1,
                    ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                int arg1,
                ffi.Pointer<ffi.Bool> arg2)>()(_id, arg0, arg1, arg2);
  }
}

bool _ObjCBlock4_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<ObjCObject> arg0,
                  ffi.UnsignedLong arg1, ffi.Pointer<ffi.Bool> arg2)>>()
      .asFunction<
          bool Function(ffi.Pointer<ObjCObject> arg0, int arg1,
              ffi.Pointer<ffi.Bool> arg2)>()(arg0, arg1, arg2);
}

final _ObjCBlock4_closureRegistry = <int, Function>{};
int _ObjCBlock4_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock4_registerClosure(Function fn) {
  final id = ++_ObjCBlock4_closureRegistryIndex;
  _ObjCBlock4_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock4_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) {
  return _ObjCBlock4_closureRegistry[block.ref.target.address]!(
      arg0, arg1, arg2);
}

class ObjCBlock4 extends _ObjCBlockBase {
  ObjCBlock4._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock4.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.UnsignedLong arg1, ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.UnsignedLong arg1,
                                ffi.Pointer<ffi.Bool> arg2)>(
                        _ObjCBlock4_fnPtrTrampoline, false)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock4.fromFunction(
      NativeMacOsFramework lib,
      bool Function(ffi.Pointer<ObjCObject> arg0, int arg1,
              ffi.Pointer<ffi.Bool> arg2)
          fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.UnsignedLong arg1,
                                ffi.Pointer<ffi.Bool> arg2)>(
                        _ObjCBlock4_closureTrampoline, false)
                    .cast(),
                _ObjCBlock4_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  bool call(
      ffi.Pointer<ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.UnsignedLong arg1,
                    ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            bool Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                int arg1,
                ffi.Pointer<ffi.Bool> arg2)>()(_id, arg0, arg1, arg2);
  }
}

int _ObjCBlock5_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ObjCObject> arg0,
                  ffi.Pointer<ObjCObject> arg1)>>()
      .asFunction<
          int Function(ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ObjCObject> arg1)>()(arg0, arg1);
}

final _ObjCBlock5_closureRegistry = <int, Function>{};
int _ObjCBlock5_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock5_registerClosure(Function fn) {
  final id = ++_ObjCBlock5_closureRegistryIndex;
  _ObjCBlock5_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

int _ObjCBlock5_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
  return _ObjCBlock5_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock5 extends _ObjCBlockBase {
  ObjCBlock5._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock5.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Int32 Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ObjCObject> arg1)>(
                        _ObjCBlock5_fnPtrTrampoline, 0)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock5.fromFunction(
      NativeMacOsFramework lib,
      int Function(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1)
          fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Int32 Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ObjCObject> arg1)>(
                        _ObjCBlock5_closureTrampoline, 0)
                    .cast(),
                _ObjCBlock5_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  int call(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Int32 Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ObjCObject> arg1)>>()
        .asFunction<
            int Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                ffi.Pointer<ObjCObject> arg1)>()(_id, arg0, arg1);
  }
}

abstract class NSComparisonResult {
  static const int NSOrderedAscending = -1;
  static const int NSOrderedSame = 0;
  static const int NSOrderedDescending = 1;
}

abstract class NSSortOptions {
  static const int NSSortConcurrent = 1;
  static const int NSSortStable = 16;
}

abstract class NSBinarySearchingOptions {
  static const int NSBinarySearchingFirstEqual = 256;
  static const int NSBinarySearchingLastEqual = 512;
  static const int NSBinarySearchingInsertionIndex = 1024;
}

abstract class NSOrderedCollectionDifferenceCalculationOptions {
  static const int NSOrderedCollectionDifferenceCalculationOmitInsertedObjects =
      1;
  static const int NSOrderedCollectionDifferenceCalculationOmitRemovedObjects =
      2;
  static const int NSOrderedCollectionDifferenceCalculationInferMoves = 4;
}

bool _ObjCBlock6_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<ObjCObject> arg0,
                  ffi.Pointer<ObjCObject> arg1)>>()
      .asFunction<
          bool Function(ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ObjCObject> arg1)>()(arg0, arg1);
}

final _ObjCBlock6_closureRegistry = <int, Function>{};
int _ObjCBlock6_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock6_registerClosure(Function fn) {
  final id = ++_ObjCBlock6_closureRegistryIndex;
  _ObjCBlock6_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock6_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
  return _ObjCBlock6_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock6 extends _ObjCBlockBase {
  ObjCBlock6._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock6.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ObjCObject> arg1)>(
                        _ObjCBlock6_fnPtrTrampoline, false)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock6.fromFunction(
      NativeMacOsFramework lib,
      bool Function(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1)
          fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ObjCObject> arg1)>(
                        _ObjCBlock6_closureTrampoline, false)
                    .cast(),
                _ObjCBlock6_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  bool call(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ObjCObject> arg1)>>()
        .asFunction<
            bool Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                ffi.Pointer<ObjCObject> arg1)>()(_id, arg0, arg1);
  }
}

class NSDictionary extends NSObject {
  NSDictionary._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSDictionary] that points to the same underlying object as [other].
  static NSDictionary castFrom<T extends _ObjCWrapper>(T other) {
    return NSDictionary._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSDictionary] that wraps the given raw object pointer.
  static NSDictionary castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSDictionary._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSDictionary].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSDictionary1);
  }

  int get count {
    return _lib._objc_msgSend_12(_id, _lib._sel_count1);
  }

  NSObject objectForKey_(NSObject aKey) {
    final _ret =
        _lib._objc_msgSend_106(_id, _lib._sel_objectForKey_1, aKey._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSEnumerator keyEnumerator() {
    final _ret = _lib._objc_msgSend_66(_id, _lib._sel_keyEnumerator1);
    return NSEnumerator._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSDictionary init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithObjects_forKeys_count_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
      int cnt) {
    final _ret = _lib._objc_msgSend_117(
        _id, _lib._sel_initWithObjects_forKeys_count_1, objects, keys, cnt);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithCoder_(NSCoder? coder) {
    final _ret = _lib._objc_msgSend_55(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSArray? get allKeys {
    final _ret = _lib._objc_msgSend_118(_id, _lib._sel_allKeys1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray allKeysForObject_(NSObject anObject) {
    final _ret =
        _lib._objc_msgSend_56(_id, _lib._sel_allKeysForObject_1, anObject._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray? get allValues {
    final _ret = _lib._objc_msgSend_118(_id, _lib._sel_allValues1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString? get description {
    final _ret = _lib._objc_msgSend_17(_id, _lib._sel_description1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get descriptionInStringsFileFormat {
    final _ret =
        _lib._objc_msgSend_17(_id, _lib._sel_descriptionInStringsFileFormat1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithLocale_(NSObject locale) {
    final _ret = _lib._objc_msgSend_59(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithLocale_indent_(NSObject locale, int level) {
    final _ret = _lib._objc_msgSend_60(
        _id, _lib._sel_descriptionWithLocale_indent_1, locale._id, level);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  bool isEqualToDictionary_(NSDictionary? otherDictionary) {
    return _lib._objc_msgSend_119(_id, _lib._sel_isEqualToDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
  }

  NSEnumerator objectEnumerator() {
    final _ret = _lib._objc_msgSend_66(_id, _lib._sel_objectEnumerator1);
    return NSEnumerator._(_ret, _lib, retain: true, release: true);
  }

  NSArray objectsForKeys_notFoundMarker_(NSArray? keys, NSObject marker) {
    final _ret = _lib._objc_msgSend_120(
        _id,
        _lib._sel_objectsForKeys_notFoundMarker_1,
        keys?._id ?? ffi.nullptr,
        marker._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  bool writeToURL_error_(
      NSURL? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_71(
        _id, _lib._sel_writeToURL_error_1, url?._id ?? ffi.nullptr, error);
  }

  NSArray keysSortedByValueUsingSelector_(ffi.Pointer<ObjCSel> comparator) {
    final _ret = _lib._objc_msgSend_69(
        _id, _lib._sel_keysSortedByValueUsingSelector_1, comparator);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  void getObjects_andKeys_count_(ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys, int count) {
    return _lib._objc_msgSend_121(
        _id, _lib._sel_getObjects_andKeys_count_1, objects, keys, count);
  }

  NSObject objectForKeyedSubscript_(NSObject key) {
    final _ret = _lib._objc_msgSend_106(
        _id, _lib._sel_objectForKeyedSubscript_1, key._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void enumerateKeysAndObjectsUsingBlock_(ObjCBlock7 block) {
    return _lib._objc_msgSend_122(
        _id, _lib._sel_enumerateKeysAndObjectsUsingBlock_1, block._id);
  }

  void enumerateKeysAndObjectsWithOptions_usingBlock_(
      int opts, ObjCBlock7 block) {
    return _lib._objc_msgSend_123(
        _id,
        _lib._sel_enumerateKeysAndObjectsWithOptions_usingBlock_1,
        opts,
        block._id);
  }

  NSArray keysSortedByValueUsingComparator_(ObjCBlock5 cmptr) {
    final _ret = _lib._objc_msgSend_103(
        _id, _lib._sel_keysSortedByValueUsingComparator_1, cmptr._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray keysSortedByValueWithOptions_usingComparator_(
      int opts, ObjCBlock5 cmptr) {
    final _ret = _lib._objc_msgSend_104(
        _id,
        _lib._sel_keysSortedByValueWithOptions_usingComparator_1,
        opts,
        cmptr._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSObject keysOfEntriesPassingTest_(ObjCBlock8 predicate) {
    final _ret = _lib._objc_msgSend_124(
        _id, _lib._sel_keysOfEntriesPassingTest_1, predicate._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject keysOfEntriesWithOptions_passingTest_(
      int opts, ObjCBlock8 predicate) {
    final _ret = _lib._objc_msgSend_125(_id,
        _lib._sel_keysOfEntriesWithOptions_passingTest_1, opts, predicate._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void getObjects_andKeys_(ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys) {
    return _lib._objc_msgSend_126(
        _id, _lib._sel_getObjects_andKeys_1, objects, keys);
  }

  static NSDictionary dictionaryWithContentsOfFile_(
      NativeMacOsFramework _lib, NSString? path) {
    final _ret = _lib._objc_msgSend_127(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithContentsOfURL_(
      NativeMacOsFramework _lib, NSURL? url) {
    final _ret = _lib._objc_msgSend_128(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithContentsOfFile_(NSString? path) {
    final _ret = _lib._objc_msgSend_127(
        _id, _lib._sel_initWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithContentsOfURL_(NSURL? url) {
    final _ret = _lib._objc_msgSend_128(
        _id, _lib._sel_initWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  bool writeToFile_atomically_(NSString? path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_114(_id, _lib._sel_writeToFile_atomically_1,
        path?._id ?? ffi.nullptr, useAuxiliaryFile);
  }

  bool writeToURL_atomically_(NSURL? url, bool atomically) {
    return _lib._objc_msgSend_115(_id, _lib._sel_writeToURL_atomically_1,
        url?._id ?? ffi.nullptr, atomically);
  }

  static NSDictionary dictionary(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSDictionary1, _lib._sel_dictionary1);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithObject_forKey_(
      NativeMacOsFramework _lib, NSObject object, NSObject? key) {
    final _ret = _lib._objc_msgSend_129(
        _lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObject_forKey_1,
        object._id,
        key?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithObjects_forKeys_count_(
      NativeMacOsFramework _lib,
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
      int cnt) {
    final _ret = _lib._objc_msgSend_117(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_count_1, objects, keys, cnt);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithObjectsAndKeys_(
      NativeMacOsFramework _lib, NSObject firstObject) {
    final _ret = _lib._objc_msgSend_106(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjectsAndKeys_1, firstObject._id);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithDictionary_(
      NativeMacOsFramework _lib, NSDictionary? dict) {
    final _ret = _lib._objc_msgSend_130(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithDictionary_1, dict?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithObjects_forKeys_(
      NativeMacOsFramework _lib, NSArray? objects, NSArray? keys) {
    final _ret = _lib._objc_msgSend_131(
        _lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_1,
        objects?._id ?? ffi.nullptr,
        keys?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithObjectsAndKeys_(NSObject firstObject) {
    final _ret = _lib._objc_msgSend_106(
        _id, _lib._sel_initWithObjectsAndKeys_1, firstObject._id);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithDictionary_(NSDictionary? otherDictionary) {
    final _ret = _lib._objc_msgSend_130(_id, _lib._sel_initWithDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithDictionary_copyItems_(
      NSDictionary? otherDictionary, bool flag) {
    final _ret = _lib._objc_msgSend_132(
        _id,
        _lib._sel_initWithDictionary_copyItems_1,
        otherDictionary?._id ?? ffi.nullptr,
        flag);
    return NSDictionary._(_ret, _lib, retain: false, release: true);
  }

  NSDictionary initWithObjects_forKeys_(NSArray? objects, NSArray? keys) {
    final _ret = _lib._objc_msgSend_131(
        _id,
        _lib._sel_initWithObjects_forKeys_1,
        objects?._id ?? ffi.nullptr,
        keys?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithContentsOfURL_error_(
      NSURL? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_133(
        _id,
        _lib._sel_initWithContentsOfURL_error_1,
        url?._id ?? ffi.nullptr,
        error);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithContentsOfURL_error_(
      NativeMacOsFramework _lib,
      NSURL? url,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_133(
        _lib._class_NSDictionary1,
        _lib._sel_dictionaryWithContentsOfURL_error_1,
        url?._id ?? ffi.nullptr,
        error);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSObject sharedKeySetForKeys_(
      NativeMacOsFramework _lib, NSArray? keys) {
    final _ret = _lib._objc_msgSend_61(_lib._class_NSDictionary1,
        _lib._sel_sharedKeySetForKeys_1, keys?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  int countByEnumeratingWithState_objects_count_(
      ffi.Pointer<NSFastEnumerationState> state,
      ffi.Pointer<ffi.Pointer<ObjCObject>> buffer,
      int len) {
    return _lib._objc_msgSend_134(
        _id,
        _lib._sel_countByEnumeratingWithState_objects_count_1,
        state,
        buffer,
        len);
  }

  static NSDictionary new1(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSDictionary1, _lib._sel_new1);
    return NSDictionary._(_ret, _lib, retain: false, release: true);
  }

  static NSDictionary alloc(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSDictionary1, _lib._sel_alloc1);
    return NSDictionary._(_ret, _lib, retain: false, release: true);
  }
}

void _ObjCBlock7_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0,
    ffi.Pointer<ObjCObject> arg1,
    ffi.Pointer<ffi.Bool> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                  ffi.Pointer<ObjCObject> arg1, ffi.Pointer<ffi.Bool> arg2)>>()
      .asFunction<
          void Function(
              ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ObjCObject> arg1,
              ffi.Pointer<ffi.Bool> arg2)>()(arg0, arg1, arg2);
}

final _ObjCBlock7_closureRegistry = <int, Function>{};
int _ObjCBlock7_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock7_registerClosure(Function fn) {
  final id = ++_ObjCBlock7_closureRegistryIndex;
  _ObjCBlock7_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock7_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0,
    ffi.Pointer<ObjCObject> arg1,
    ffi.Pointer<ffi.Bool> arg2) {
  return _ObjCBlock7_closureRegistry[block.ref.target.address]!(
      arg0, arg1, arg2);
}

class ObjCBlock7 extends _ObjCBlockBase {
  ObjCBlock7._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock7.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ObjCObject> arg1,
                                ffi.Pointer<ffi.Bool> arg2)>(
                        _ObjCBlock7_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock7.fromFunction(
      NativeMacOsFramework lib,
      void Function(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1,
              ffi.Pointer<ffi.Bool> arg2)
          fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ObjCObject> arg1,
                                ffi.Pointer<ffi.Bool> arg2)>(
                        _ObjCBlock7_closureTrampoline)
                    .cast(),
                _ObjCBlock7_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  void call(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1,
      ffi.Pointer<ffi.Bool> arg2) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ObjCObject> arg1,
                    ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                ffi.Pointer<ObjCObject> arg1,
                ffi.Pointer<ffi.Bool> arg2)>()(_id, arg0, arg1, arg2);
  }
}

bool _ObjCBlock8_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0,
    ffi.Pointer<ObjCObject> arg1,
    ffi.Pointer<ffi.Bool> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<ObjCObject> arg0,
                  ffi.Pointer<ObjCObject> arg1, ffi.Pointer<ffi.Bool> arg2)>>()
      .asFunction<
          bool Function(
              ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ObjCObject> arg1,
              ffi.Pointer<ffi.Bool> arg2)>()(arg0, arg1, arg2);
}

final _ObjCBlock8_closureRegistry = <int, Function>{};
int _ObjCBlock8_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock8_registerClosure(Function fn) {
  final id = ++_ObjCBlock8_closureRegistryIndex;
  _ObjCBlock8_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock8_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0,
    ffi.Pointer<ObjCObject> arg1,
    ffi.Pointer<ffi.Bool> arg2) {
  return _ObjCBlock8_closureRegistry[block.ref.target.address]!(
      arg0, arg1, arg2);
}

class ObjCBlock8 extends _ObjCBlockBase {
  ObjCBlock8._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock8.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ObjCObject> arg1,
                                ffi.Pointer<ffi.Bool> arg2)>(
                        _ObjCBlock8_fnPtrTrampoline, false)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock8.fromFunction(
      NativeMacOsFramework lib,
      bool Function(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1,
              ffi.Pointer<ffi.Bool> arg2)
          fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ObjCObject> arg1,
                                ffi.Pointer<ffi.Bool> arg2)>(
                        _ObjCBlock8_closureTrampoline, false)
                    .cast(),
                _ObjCBlock8_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  bool call(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1,
      ffi.Pointer<ffi.Bool> arg2) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ObjCObject> arg1,
                    ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            bool Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                ffi.Pointer<ObjCObject> arg1,
                ffi.Pointer<ffi.Bool> arg2)>()(_id, arg0, arg1, arg2);
  }
}

final class NSFastEnumerationState extends ffi.Struct {
  @ffi.UnsignedLong()
  external int state;

  external ffi.Pointer<ffi.Pointer<ObjCObject>> itemsPtr;

  external ffi.Pointer<ffi.UnsignedLong> mutationsPtr;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.UnsignedLong> extra;
}

abstract class NSDecodingFailurePolicy {
  static const int NSDecodingFailurePolicyRaiseException = 0;
  static const int NSDecodingFailurePolicySetErrorAndReturn = 1;
}

final class CGPoint extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

final class CGSize extends ffi.Struct {
  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;
}

final class CGRect extends ffi.Struct {
  external CGPoint origin;

  external CGSize size;
}

class NSValue extends NSObject {
  NSValue._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSValue] that points to the same underlying object as [other].
  static NSValue castFrom<T extends _ObjCWrapper>(T other) {
    return NSValue._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSValue] that wraps the given raw object pointer.
  static NSValue castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSValue._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSValue].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSValue1);
  }

  void getValue_size_(ffi.Pointer<ffi.Void> value, int size) {
    return _lib._objc_msgSend_28(_id, _lib._sel_getValue_size_1, value, size);
  }

  ffi.Pointer<ffi.Char> get objCType {
    return _lib._objc_msgSend_151(_id, _lib._sel_objCType1);
  }

  NSValue initWithBytes_objCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_152(
        _id, _lib._sel_initWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  NSValue initWithCoder_(NSCoder? coder) {
    final _ret = _lib._objc_msgSend_55(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithBytes_objCType_(NativeMacOsFramework _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_153(
        _lib._class_NSValue1, _lib._sel_valueWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue value_withObjCType_(NativeMacOsFramework _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_153(
        _lib._class_NSValue1, _lib._sel_value_withObjCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithNonretainedObject_(
      NativeMacOsFramework _lib, NSObject anObject) {
    final _ret = _lib._objc_msgSend_154(_lib._class_NSValue1,
        _lib._sel_valueWithNonretainedObject_1, anObject._id);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  NSObject get nonretainedObjectValue {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_nonretainedObjectValue1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithPointer_(
      NativeMacOsFramework _lib, ffi.Pointer<ffi.Void> pointer) {
    final _ret = _lib._objc_msgSend_155(
        _lib._class_NSValue1, _lib._sel_valueWithPointer_1, pointer);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  ffi.Pointer<ffi.Void> get pointerValue {
    return _lib._objc_msgSend_14(_id, _lib._sel_pointerValue1);
  }

  bool isEqualToValue_(NSValue? value) {
    return _lib._objc_msgSend_156(
        _id, _lib._sel_isEqualToValue_1, value?._id ?? ffi.nullptr);
  }

  void getValue_(ffi.Pointer<ffi.Void> value) {
    return _lib._objc_msgSend_157(_id, _lib._sel_getValue_1, value);
  }

  static NSValue valueWithRange_(NativeMacOsFramework _lib, _NSRange range) {
    final _ret = _lib._objc_msgSend_158(
        _lib._class_NSValue1, _lib._sel_valueWithRange_1, range);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  _NSRange get rangeValue {
    return _lib._objc_msgSend_159(_id, _lib._sel_rangeValue1);
  }

  static NSValue valueWithPoint_(NativeMacOsFramework _lib, CGPoint point) {
    final _ret = _lib._objc_msgSend_160(
        _lib._class_NSValue1, _lib._sel_valueWithPoint_1, point);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithSize_(NativeMacOsFramework _lib, CGSize size) {
    final _ret = _lib._objc_msgSend_161(
        _lib._class_NSValue1, _lib._sel_valueWithSize_1, size);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithRect_(NativeMacOsFramework _lib, CGRect rect) {
    final _ret = _lib._objc_msgSend_162(
        _lib._class_NSValue1, _lib._sel_valueWithRect_1, rect);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithEdgeInsets_(
      NativeMacOsFramework _lib, NSEdgeInsets insets) {
    final _ret = _lib._objc_msgSend_163(
        _lib._class_NSValue1, _lib._sel_valueWithEdgeInsets_1, insets);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  CGPoint get pointValue {
    return _lib._objc_msgSend_140(_id, _lib._sel_pointValue1);
  }

  CGSize get sizeValue {
    return _lib._objc_msgSend_142(_id, _lib._sel_sizeValue1);
  }

  CGRect get rectValue {
    return _lib._objc_msgSend_144(_id, _lib._sel_rectValue1);
  }

  NSEdgeInsets get edgeInsetsValue {
    return _lib._objc_msgSend_164(_id, _lib._sel_edgeInsetsValue1);
  }

  static NSValue new1(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSValue1, _lib._sel_new1);
    return NSValue._(_ret, _lib, retain: false, release: true);
  }

  static NSValue alloc(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSValue1, _lib._sel_alloc1);
    return NSValue._(_ret, _lib, retain: false, release: true);
  }
}

final class NSEdgeInsets extends ffi.Struct {
  @ffi.Double()
  external double top;

  @ffi.Double()
  external double left;

  @ffi.Double()
  external double bottom;

  @ffi.Double()
  external double right;
}

class NSNumber extends NSValue {
  NSNumber._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSNumber] that points to the same underlying object as [other].
  static NSNumber castFrom<T extends _ObjCWrapper>(T other) {
    return NSNumber._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSNumber] that wraps the given raw object pointer.
  static NSNumber castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSNumber._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSNumber].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSNumber1);
  }

  @override
  NSNumber initWithCoder_(NSCoder? coder) {
    final _ret = _lib._objc_msgSend_55(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithChar_(int value) {
    final _ret = _lib._objc_msgSend_165(_id, _lib._sel_initWithChar_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedChar_(int value) {
    final _ret =
        _lib._objc_msgSend_166(_id, _lib._sel_initWithUnsignedChar_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithShort_(int value) {
    final _ret = _lib._objc_msgSend_167(_id, _lib._sel_initWithShort_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedShort_(int value) {
    final _ret =
        _lib._objc_msgSend_168(_id, _lib._sel_initWithUnsignedShort_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithInt_(int value) {
    final _ret = _lib._objc_msgSend_169(_id, _lib._sel_initWithInt_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedInt_(int value) {
    final _ret =
        _lib._objc_msgSend_170(_id, _lib._sel_initWithUnsignedInt_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithLong_(int value) {
    final _ret = _lib._objc_msgSend_171(_id, _lib._sel_initWithLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedLong_(int value) {
    final _ret =
        _lib._objc_msgSend_172(_id, _lib._sel_initWithUnsignedLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithLongLong_(int value) {
    final _ret =
        _lib._objc_msgSend_173(_id, _lib._sel_initWithLongLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedLongLong_(int value) {
    final _ret = _lib._objc_msgSend_174(
        _id, _lib._sel_initWithUnsignedLongLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithFloat_(double value) {
    final _ret = _lib._objc_msgSend_175(_id, _lib._sel_initWithFloat_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithDouble_(double value) {
    final _ret = _lib._objc_msgSend_176(_id, _lib._sel_initWithDouble_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithBool_(bool value) {
    final _ret = _lib._objc_msgSend_177(_id, _lib._sel_initWithBool_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithInteger_(int value) {
    final _ret =
        _lib._objc_msgSend_171(_id, _lib._sel_initWithInteger_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedInteger_(int value) {
    final _ret =
        _lib._objc_msgSend_172(_id, _lib._sel_initWithUnsignedInteger_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  int get charValue {
    return _lib._objc_msgSend_178(_id, _lib._sel_charValue1);
  }

  int get unsignedCharValue {
    return _lib._objc_msgSend_179(_id, _lib._sel_unsignedCharValue1);
  }

  int get shortValue {
    return _lib._objc_msgSend_180(_id, _lib._sel_shortValue1);
  }

  int get unsignedShortValue {
    return _lib._objc_msgSend_181(_id, _lib._sel_unsignedShortValue1);
  }

  int get intValue {
    return _lib._objc_msgSend_182(_id, _lib._sel_intValue1);
  }

  int get unsignedIntValue {
    return _lib._objc_msgSend_16(_id, _lib._sel_unsignedIntValue1);
  }

  int get longValue {
    return _lib._objc_msgSend_18(_id, _lib._sel_longValue1);
  }

  int get unsignedLongValue {
    return _lib._objc_msgSend_12(_id, _lib._sel_unsignedLongValue1);
  }

  int get longLongValue {
    return _lib._objc_msgSend_183(_id, _lib._sel_longLongValue1);
  }

  int get unsignedLongLongValue {
    return _lib._objc_msgSend_184(_id, _lib._sel_unsignedLongLongValue1);
  }

  double get floatValue {
    return _lib._objc_msgSend_185(_id, _lib._sel_floatValue1);
  }

  double get doubleValue {
    return _lib._objc_msgSend_186(_id, _lib._sel_doubleValue1);
  }

  bool get boolValue {
    return _lib._objc_msgSend_11(_id, _lib._sel_boolValue1);
  }

  int get integerValue {
    return _lib._objc_msgSend_18(_id, _lib._sel_integerValue1);
  }

  int get unsignedIntegerValue {
    return _lib._objc_msgSend_12(_id, _lib._sel_unsignedIntegerValue1);
  }

  NSString? get stringValue {
    final _ret = _lib._objc_msgSend_17(_id, _lib._sel_stringValue1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  int compare_(NSNumber? otherNumber) {
    return _lib._objc_msgSend_187(
        _id, _lib._sel_compare_1, otherNumber?._id ?? ffi.nullptr);
  }

  bool isEqualToNumber_(NSNumber? number) {
    return _lib._objc_msgSend_188(
        _id, _lib._sel_isEqualToNumber_1, number?._id ?? ffi.nullptr);
  }

  NSString descriptionWithLocale_(NSObject locale) {
    final _ret = _lib._objc_msgSend_59(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithChar_(NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_165(
        _lib._class_NSNumber1, _lib._sel_numberWithChar_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedChar_(
      NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_166(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedChar_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithShort_(NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_167(
        _lib._class_NSNumber1, _lib._sel_numberWithShort_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedShort_(
      NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_168(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedShort_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithInt_(NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_169(
        _lib._class_NSNumber1, _lib._sel_numberWithInt_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedInt_(NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_170(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedInt_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithLong_(NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_171(
        _lib._class_NSNumber1, _lib._sel_numberWithLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedLong_(
      NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_172(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithLongLong_(NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_173(
        _lib._class_NSNumber1, _lib._sel_numberWithLongLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedLongLong_(
      NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_174(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedLongLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithFloat_(NativeMacOsFramework _lib, double value) {
    final _ret = _lib._objc_msgSend_175(
        _lib._class_NSNumber1, _lib._sel_numberWithFloat_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithDouble_(NativeMacOsFramework _lib, double value) {
    final _ret = _lib._objc_msgSend_176(
        _lib._class_NSNumber1, _lib._sel_numberWithDouble_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithBool_(NativeMacOsFramework _lib, bool value) {
    final _ret = _lib._objc_msgSend_177(
        _lib._class_NSNumber1, _lib._sel_numberWithBool_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithInteger_(NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_171(
        _lib._class_NSNumber1, _lib._sel_numberWithInteger_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedInteger_(
      NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_172(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedInteger_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithBytes_objCType_(NativeMacOsFramework _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_153(_lib._class_NSNumber1,
        _lib._sel_valueWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue value_withObjCType_(NativeMacOsFramework _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_153(
        _lib._class_NSNumber1, _lib._sel_value_withObjCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithNonretainedObject_(
      NativeMacOsFramework _lib, NSObject anObject) {
    final _ret = _lib._objc_msgSend_154(_lib._class_NSNumber1,
        _lib._sel_valueWithNonretainedObject_1, anObject._id);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithPointer_(
      NativeMacOsFramework _lib, ffi.Pointer<ffi.Void> pointer) {
    final _ret = _lib._objc_msgSend_155(
        _lib._class_NSNumber1, _lib._sel_valueWithPointer_1, pointer);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithRange_(NativeMacOsFramework _lib, _NSRange range) {
    final _ret = _lib._objc_msgSend_158(
        _lib._class_NSNumber1, _lib._sel_valueWithRange_1, range);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithPoint_(NativeMacOsFramework _lib, CGPoint point) {
    final _ret = _lib._objc_msgSend_160(
        _lib._class_NSNumber1, _lib._sel_valueWithPoint_1, point);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithSize_(NativeMacOsFramework _lib, CGSize size) {
    final _ret = _lib._objc_msgSend_161(
        _lib._class_NSNumber1, _lib._sel_valueWithSize_1, size);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithRect_(NativeMacOsFramework _lib, CGRect rect) {
    final _ret = _lib._objc_msgSend_162(
        _lib._class_NSNumber1, _lib._sel_valueWithRect_1, rect);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithEdgeInsets_(
      NativeMacOsFramework _lib, NSEdgeInsets insets) {
    final _ret = _lib._objc_msgSend_163(
        _lib._class_NSNumber1, _lib._sel_valueWithEdgeInsets_1, insets);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber new1(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSNumber1, _lib._sel_new1);
    return NSNumber._(_ret, _lib, retain: false, release: true);
  }

  static NSNumber alloc(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSNumber1, _lib._sel_alloc1);
    return NSNumber._(_ret, _lib, retain: false, release: true);
  }
}

class NSMutableArray extends NSArray {
  NSMutableArray._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMutableArray] that points to the same underlying object as [other].
  static NSMutableArray castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableArray._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSMutableArray] that wraps the given raw object pointer.
  static NSMutableArray castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMutableArray._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableArray].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSMutableArray1);
  }

  void addObject_(NSObject anObject) {
    return _lib._objc_msgSend_25(_id, _lib._sel_addObject_1, anObject._id);
  }

  void insertObject_atIndex_(NSObject anObject, int index) {
    return _lib._objc_msgSend_189(
        _id, _lib._sel_insertObject_atIndex_1, anObject._id, index);
  }

  void removeLastObject() {
    return _lib._objc_msgSend_1(_id, _lib._sel_removeLastObject1);
  }

  void removeObjectAtIndex_(int index) {
    return _lib._objc_msgSend_190(_id, _lib._sel_removeObjectAtIndex_1, index);
  }

  void replaceObjectAtIndex_withObject_(int index, NSObject anObject) {
    return _lib._objc_msgSend_191(
        _id, _lib._sel_replaceObjectAtIndex_withObject_1, index, anObject._id);
  }

  @override
  NSMutableArray init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  NSMutableArray initWithCapacity_(int numItems) {
    final _ret =
        _lib._objc_msgSend_53(_id, _lib._sel_initWithCapacity_1, numItems);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableArray initWithCoder_(NSCoder? coder) {
    final _ret = _lib._objc_msgSend_55(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  void addObjectsFromArray_(NSArray? otherArray) {
    return _lib._objc_msgSend_192(
        _id, _lib._sel_addObjectsFromArray_1, otherArray?._id ?? ffi.nullptr);
  }

  void exchangeObjectAtIndex_withObjectAtIndex_(int idx1, int idx2) {
    return _lib._objc_msgSend_193(
        _id, _lib._sel_exchangeObjectAtIndex_withObjectAtIndex_1, idx1, idx2);
  }

  void removeAllObjects() {
    return _lib._objc_msgSend_1(_id, _lib._sel_removeAllObjects1);
  }

  void removeObject_inRange_(NSObject anObject, _NSRange range) {
    return _lib._objc_msgSend_194(
        _id, _lib._sel_removeObject_inRange_1, anObject._id, range);
  }

  void removeObject_(NSObject anObject) {
    return _lib._objc_msgSend_25(_id, _lib._sel_removeObject_1, anObject._id);
  }

  void removeObjectIdenticalTo_inRange_(NSObject anObject, _NSRange range) {
    return _lib._objc_msgSend_194(
        _id, _lib._sel_removeObjectIdenticalTo_inRange_1, anObject._id, range);
  }

  void removeObjectIdenticalTo_(NSObject anObject) {
    return _lib._objc_msgSend_25(
        _id, _lib._sel_removeObjectIdenticalTo_1, anObject._id);
  }

  void removeObjectsFromIndices_numIndices_(
      ffi.Pointer<ffi.UnsignedLong> indices, int cnt) {
    return _lib._objc_msgSend_195(
        _id, _lib._sel_removeObjectsFromIndices_numIndices_1, indices, cnt);
  }

  void removeObjectsInArray_(NSArray? otherArray) {
    return _lib._objc_msgSend_192(
        _id, _lib._sel_removeObjectsInArray_1, otherArray?._id ?? ffi.nullptr);
  }

  void removeObjectsInRange_(_NSRange range) {
    return _lib._objc_msgSend_196(_id, _lib._sel_removeObjectsInRange_1, range);
  }

  void replaceObjectsInRange_withObjectsFromArray_range_(
      _NSRange range, NSArray? otherArray, _NSRange otherRange) {
    return _lib._objc_msgSend_197(
        _id,
        _lib._sel_replaceObjectsInRange_withObjectsFromArray_range_1,
        range,
        otherArray?._id ?? ffi.nullptr,
        otherRange);
  }

  void replaceObjectsInRange_withObjectsFromArray_(
      _NSRange range, NSArray? otherArray) {
    return _lib._objc_msgSend_198(
        _id,
        _lib._sel_replaceObjectsInRange_withObjectsFromArray_1,
        range,
        otherArray?._id ?? ffi.nullptr);
  }

  void setArray_(NSArray? otherArray) {
    return _lib._objc_msgSend_192(
        _id, _lib._sel_setArray_1, otherArray?._id ?? ffi.nullptr);
  }

  void sortUsingFunction_context_(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Long Function(ffi.Pointer<ObjCObject>,
                      ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>
          compare,
      ffi.Pointer<ffi.Void> context) {
    return _lib._objc_msgSend_199(
        _id, _lib._sel_sortUsingFunction_context_1, compare, context);
  }

  void sortUsingSelector_(ffi.Pointer<ObjCSel> comparator) {
    return _lib._objc_msgSend_7(_id, _lib._sel_sortUsingSelector_1, comparator);
  }

  void insertObjects_atIndexes_(NSArray? objects, NSIndexSet? indexes) {
    return _lib._objc_msgSend_200(_id, _lib._sel_insertObjects_atIndexes_1,
        objects?._id ?? ffi.nullptr, indexes?._id ?? ffi.nullptr);
  }

  void removeObjectsAtIndexes_(NSIndexSet? indexes) {
    return _lib._objc_msgSend_201(
        _id, _lib._sel_removeObjectsAtIndexes_1, indexes?._id ?? ffi.nullptr);
  }

  void replaceObjectsAtIndexes_withObjects_(
      NSIndexSet? indexes, NSArray? objects) {
    return _lib._objc_msgSend_202(
        _id,
        _lib._sel_replaceObjectsAtIndexes_withObjects_1,
        indexes?._id ?? ffi.nullptr,
        objects?._id ?? ffi.nullptr);
  }

  void setObject_atIndexedSubscript_(NSObject obj, int idx) {
    return _lib._objc_msgSend_189(
        _id, _lib._sel_setObject_atIndexedSubscript_1, obj._id, idx);
  }

  void sortUsingComparator_(ObjCBlock5 cmptr) {
    return _lib._objc_msgSend_203(
        _id, _lib._sel_sortUsingComparator_1, cmptr._id);
  }

  void sortWithOptions_usingComparator_(int opts, ObjCBlock5 cmptr) {
    return _lib._objc_msgSend_204(
        _id, _lib._sel_sortWithOptions_usingComparator_1, opts, cmptr._id);
  }

  static NSMutableArray arrayWithCapacity_(
      NativeMacOsFramework _lib, int numItems) {
    final _ret = _lib._objc_msgSend_53(
        _lib._class_NSMutableArray1, _lib._sel_arrayWithCapacity_1, numItems);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray arrayWithContentsOfFile_(
      NativeMacOsFramework _lib, NSString? path) {
    final _ret = _lib._objc_msgSend_205(_lib._class_NSMutableArray1,
        _lib._sel_arrayWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray arrayWithContentsOfURL_(
      NativeMacOsFramework _lib, NSURL? url) {
    final _ret = _lib._objc_msgSend_206(_lib._class_NSMutableArray1,
        _lib._sel_arrayWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  NSMutableArray initWithContentsOfFile_(NSString? path) {
    final _ret = _lib._objc_msgSend_205(
        _id, _lib._sel_initWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  NSMutableArray initWithContentsOfURL_(NSURL? url) {
    final _ret = _lib._objc_msgSend_206(
        _id, _lib._sel_initWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  void applyDifference_(NSObject? difference) {
    return _lib._objc_msgSend_25(
        _id, _lib._sel_applyDifference_1, difference?._id ?? ffi.nullptr);
  }

  static NSMutableArray array(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableArray1, _lib._sel_array1);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray arrayWithObject_(
      NativeMacOsFramework _lib, NSObject anObject) {
    final _ret = _lib._objc_msgSend_106(
        _lib._class_NSMutableArray1, _lib._sel_arrayWithObject_1, anObject._id);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray arrayWithObjects_count_(NativeMacOsFramework _lib,
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int cnt) {
    final _ret = _lib._objc_msgSend_54(_lib._class_NSMutableArray1,
        _lib._sel_arrayWithObjects_count_1, objects, cnt);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray arrayWithObjects_(
      NativeMacOsFramework _lib, NSObject firstObj) {
    final _ret = _lib._objc_msgSend_106(_lib._class_NSMutableArray1,
        _lib._sel_arrayWithObjects_1, firstObj._id);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray arrayWithArray_(
      NativeMacOsFramework _lib, NSArray? array) {
    final _ret = _lib._objc_msgSend_61(_lib._class_NSMutableArray1,
        _lib._sel_arrayWithArray_1, array?._id ?? ffi.nullptr);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithContentsOfURL_error_(NativeMacOsFramework _lib,
      NSURL? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_108(
        _lib._class_NSMutableArray1,
        _lib._sel_arrayWithContentsOfURL_error_1,
        url?._id ?? ffi.nullptr,
        error);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray new1(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableArray1, _lib._sel_new1);
    return NSMutableArray._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableArray alloc(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableArray1, _lib._sel_alloc1);
    return NSMutableArray._(_ret, _lib, retain: false, release: true);
  }
}

class NSNotification extends NSObject {
  NSNotification._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSNotification] that points to the same underlying object as [other].
  static NSNotification castFrom<T extends _ObjCWrapper>(T other) {
    return NSNotification._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSNotification] that wraps the given raw object pointer.
  static NSNotification castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSNotification._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSNotification].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSNotification1);
  }

  NSString get name {
    final _ret = _lib._objc_msgSend_17(_id, _lib._sel_name1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSObject get object {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_object1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? get userInfo {
    final _ret = _lib._objc_msgSend_207(_id, _lib._sel_userInfo1);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSNotification initWithName_object_userInfo_(
      NSString name, NSObject object, NSDictionary? userInfo) {
    final _ret = _lib._objc_msgSend_208(
        _id,
        _lib._sel_initWithName_object_userInfo_1,
        name._id,
        object._id,
        userInfo?._id ?? ffi.nullptr);
    return NSNotification._(_ret, _lib, retain: true, release: true);
  }

  NSNotification initWithCoder_(NSCoder? coder) {
    final _ret = _lib._objc_msgSend_55(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSNotification._(_ret, _lib, retain: true, release: true);
  }

  static NSNotification notificationWithName_object_(
      NativeMacOsFramework _lib, NSString aName, NSObject anObject) {
    final _ret = _lib._objc_msgSend_209(_lib._class_NSNotification1,
        _lib._sel_notificationWithName_object_1, aName._id, anObject._id);
    return NSNotification._(_ret, _lib, retain: true, release: true);
  }

  static NSNotification notificationWithName_object_userInfo_(
      NativeMacOsFramework _lib,
      NSString aName,
      NSObject anObject,
      NSDictionary? aUserInfo) {
    final _ret = _lib._objc_msgSend_208(
        _lib._class_NSNotification1,
        _lib._sel_notificationWithName_object_userInfo_1,
        aName._id,
        anObject._id,
        aUserInfo?._id ?? ffi.nullptr);
    return NSNotification._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSNotification init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSNotification._(_ret, _lib, retain: true, release: true);
  }

  static NSNotification new1(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSNotification1, _lib._sel_new1);
    return NSNotification._(_ret, _lib, retain: false, release: true);
  }

  static NSNotification alloc(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSNotification1, _lib._sel_alloc1);
    return NSNotification._(_ret, _lib, retain: false, release: true);
  }
}

class NSDate extends NSObject {
  NSDate._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSDate] that points to the same underlying object as [other].
  static NSDate castFrom<T extends _ObjCWrapper>(T other) {
    return NSDate._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSDate] that wraps the given raw object pointer.
  static NSDate castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSDate._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSDate].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSDate1);
  }

  double get timeIntervalSinceReferenceDate {
    return _lib._objc_msgSend_186(
        _id, _lib._sel_timeIntervalSinceReferenceDate1);
  }

  @override
  NSDate init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate initWithTimeIntervalSinceReferenceDate_(double ti) {
    final _ret = _lib._objc_msgSend_210(
        _id, _lib._sel_initWithTimeIntervalSinceReferenceDate_1, ti);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate initWithCoder_(NSCoder? coder) {
    final _ret = _lib._objc_msgSend_55(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  double timeIntervalSinceDate_(NSDate? anotherDate) {
    return _lib._objc_msgSend_211(_id, _lib._sel_timeIntervalSinceDate_1,
        anotherDate?._id ?? ffi.nullptr);
  }

  double get timeIntervalSinceNow {
    return _lib._objc_msgSend_186(_id, _lib._sel_timeIntervalSinceNow1);
  }

  double get timeIntervalSince1970 {
    return _lib._objc_msgSend_186(_id, _lib._sel_timeIntervalSince19701);
  }

  NSObject addTimeInterval_(double seconds) {
    final _ret =
        _lib._objc_msgSend_210(_id, _lib._sel_addTimeInterval_1, seconds);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSDate dateByAddingTimeInterval_(double ti) {
    final _ret =
        _lib._objc_msgSend_210(_id, _lib._sel_dateByAddingTimeInterval_1, ti);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate earlierDate_(NSDate? anotherDate) {
    final _ret = _lib._objc_msgSend_212(
        _id, _lib._sel_earlierDate_1, anotherDate?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate laterDate_(NSDate? anotherDate) {
    final _ret = _lib._objc_msgSend_212(
        _id, _lib._sel_laterDate_1, anotherDate?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  int compare_(NSDate? other) {
    return _lib._objc_msgSend_213(
        _id, _lib._sel_compare_1, other?._id ?? ffi.nullptr);
  }

  bool isEqualToDate_(NSDate? otherDate) {
    return _lib._objc_msgSend_214(
        _id, _lib._sel_isEqualToDate_1, otherDate?._id ?? ffi.nullptr);
  }

  NSString? get description {
    final _ret = _lib._objc_msgSend_17(_id, _lib._sel_description1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithLocale_(NSObject locale) {
    final _ret = _lib._objc_msgSend_59(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSDate date(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSDate1, _lib._sel_date1);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate dateWithTimeIntervalSinceNow_(
      NativeMacOsFramework _lib, double secs) {
    final _ret = _lib._objc_msgSend_210(
        _lib._class_NSDate1, _lib._sel_dateWithTimeIntervalSinceNow_1, secs);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate dateWithTimeIntervalSinceReferenceDate_(
      NativeMacOsFramework _lib, double ti) {
    final _ret = _lib._objc_msgSend_210(_lib._class_NSDate1,
        _lib._sel_dateWithTimeIntervalSinceReferenceDate_1, ti);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate dateWithTimeIntervalSince1970_(
      NativeMacOsFramework _lib, double secs) {
    final _ret = _lib._objc_msgSend_210(
        _lib._class_NSDate1, _lib._sel_dateWithTimeIntervalSince1970_1, secs);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate dateWithTimeInterval_sinceDate_(
      NativeMacOsFramework _lib, double secsToBeAdded, NSDate? date) {
    final _ret = _lib._objc_msgSend_215(
        _lib._class_NSDate1,
        _lib._sel_dateWithTimeInterval_sinceDate_1,
        secsToBeAdded,
        date?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate? getDistantFuture(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_216(_lib._class_NSDate1, _lib._sel_distantFuture1);
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate? getDistantPast(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_216(_lib._class_NSDate1, _lib._sel_distantPast1);
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate? getNow(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_216(_lib._class_NSDate1, _lib._sel_now1);
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate initWithTimeIntervalSinceNow_(double secs) {
    final _ret = _lib._objc_msgSend_210(
        _id, _lib._sel_initWithTimeIntervalSinceNow_1, secs);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate initWithTimeIntervalSince1970_(double secs) {
    final _ret = _lib._objc_msgSend_210(
        _id, _lib._sel_initWithTimeIntervalSince1970_1, secs);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate initWithTimeInterval_sinceDate_(double secsToBeAdded, NSDate? date) {
    final _ret = _lib._objc_msgSend_215(
        _id,
        _lib._sel_initWithTimeInterval_sinceDate_1,
        secsToBeAdded,
        date?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate new1(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSDate1, _lib._sel_new1);
    return NSDate._(_ret, _lib, retain: false, release: true);
  }

  static NSDate alloc(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSDate1, _lib._sel_alloc1);
    return NSDate._(_ret, _lib, retain: false, release: true);
  }
}

class NSMutableDictionary extends NSDictionary {
  NSMutableDictionary._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMutableDictionary] that points to the same underlying object as [other].
  static NSMutableDictionary castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableDictionary._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSMutableDictionary] that wraps the given raw object pointer.
  static NSMutableDictionary castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMutableDictionary._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableDictionary].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSMutableDictionary1);
  }

  void removeObjectForKey_(NSObject aKey) {
    return _lib._objc_msgSend_25(_id, _lib._sel_removeObjectForKey_1, aKey._id);
  }

  void setObject_forKey_(NSObject anObject, NSObject? aKey) {
    return _lib._objc_msgSend_217(_id, _lib._sel_setObject_forKey_1,
        anObject._id, aKey?._id ?? ffi.nullptr);
  }

  @override
  NSMutableDictionary init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSMutableDictionary initWithCapacity_(int numItems) {
    final _ret =
        _lib._objc_msgSend_53(_id, _lib._sel_initWithCapacity_1, numItems);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableDictionary initWithCoder_(NSCoder? coder) {
    final _ret = _lib._objc_msgSend_55(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  void addEntriesFromDictionary_(NSDictionary? otherDictionary) {
    return _lib._objc_msgSend_218(_id, _lib._sel_addEntriesFromDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
  }

  void removeAllObjects() {
    return _lib._objc_msgSend_1(_id, _lib._sel_removeAllObjects1);
  }

  void removeObjectsForKeys_(NSArray? keyArray) {
    return _lib._objc_msgSend_192(
        _id, _lib._sel_removeObjectsForKeys_1, keyArray?._id ?? ffi.nullptr);
  }

  void setDictionary_(NSDictionary? otherDictionary) {
    return _lib._objc_msgSend_218(
        _id, _lib._sel_setDictionary_1, otherDictionary?._id ?? ffi.nullptr);
  }

  void setObject_forKeyedSubscript_(NSObject obj, NSObject? key) {
    return _lib._objc_msgSend_217(_id, _lib._sel_setObject_forKeyedSubscript_1,
        obj._id, key?._id ?? ffi.nullptr);
  }

  static NSMutableDictionary dictionaryWithCapacity_(
      NativeMacOsFramework _lib, int numItems) {
    final _ret = _lib._objc_msgSend_53(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithCapacity_1, numItems);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithContentsOfFile_(
      NativeMacOsFramework _lib, NSString? path) {
    final _ret = _lib._objc_msgSend_219(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithContentsOfURL_(
      NativeMacOsFramework _lib, NSURL? url) {
    final _ret = _lib._objc_msgSend_220(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSMutableDictionary initWithContentsOfFile_(NSString? path) {
    final _ret = _lib._objc_msgSend_219(
        _id, _lib._sel_initWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSMutableDictionary initWithContentsOfURL_(NSURL? url) {
    final _ret = _lib._objc_msgSend_220(
        _id, _lib._sel_initWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithSharedKeySet_(
      NativeMacOsFramework _lib, NSObject keyset) {
    final _ret = _lib._objc_msgSend_221(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithSharedKeySet_1, keyset._id);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionary(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMutableDictionary1, _lib._sel_dictionary1);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithObject_forKey_(
      NativeMacOsFramework _lib, NSObject object, NSObject? key) {
    final _ret = _lib._objc_msgSend_129(
        _lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithObject_forKey_1,
        object._id,
        key?._id ?? ffi.nullptr);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithObjects_forKeys_count_(
      NativeMacOsFramework _lib,
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
      int cnt) {
    final _ret = _lib._objc_msgSend_117(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_count_1, objects, keys, cnt);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithObjectsAndKeys_(
      NativeMacOsFramework _lib, NSObject firstObject) {
    final _ret = _lib._objc_msgSend_106(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithObjectsAndKeys_1, firstObject._id);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithDictionary_(
      NativeMacOsFramework _lib, NSDictionary? dict) {
    final _ret = _lib._objc_msgSend_130(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithDictionary_1, dict?._id ?? ffi.nullptr);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithObjects_forKeys_(
      NativeMacOsFramework _lib, NSArray? objects, NSArray? keys) {
    final _ret = _lib._objc_msgSend_131(
        _lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_1,
        objects?._id ?? ffi.nullptr,
        keys?._id ?? ffi.nullptr);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithContentsOfURL_error_(
      NativeMacOsFramework _lib,
      NSURL? url,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_133(
        _lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithContentsOfURL_error_1,
        url?._id ?? ffi.nullptr,
        error);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSObject sharedKeySetForKeys_(
      NativeMacOsFramework _lib, NSArray? keys) {
    final _ret = _lib._objc_msgSend_61(_lib._class_NSMutableDictionary1,
        _lib._sel_sharedKeySetForKeys_1, keys?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary new1(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableDictionary1, _lib._sel_new1);
    return NSMutableDictionary._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableDictionary alloc(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMutableDictionary1, _lib._sel_alloc1);
    return NSMutableDictionary._(_ret, _lib, retain: false, release: true);
  }
}

class NSScreen extends NSObject {
  NSScreen._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSScreen] that points to the same underlying object as [other].
  static NSScreen castFrom<T extends _ObjCWrapper>(T other) {
    return NSScreen._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSScreen] that wraps the given raw object pointer.
  static NSScreen castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSScreen._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSScreen].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSScreen1);
  }

  /// All screens; first one is "zero" screen
  static NSArray? getScreens(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_118(_lib._class_NSScreen1, _lib._sel_screens1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  /// Screen with key window
  static NSScreen? getMainScreen(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_222(_lib._class_NSScreen1, _lib._sel_mainScreen1);
    return _ret.address == 0
        ? null
        : NSScreen._(_ret, _lib, retain: true, release: true);
  }

  static NSScreen? getDeepestScreen(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_222(_lib._class_NSScreen1, _lib._sel_deepestScreen1);
    return _ret.address == 0
        ? null
        : NSScreen._(_ret, _lib, retain: true, release: true);
  }

  /// screensHaveSeparateSpaces returns YES if each screen has its own set of spaces.  This is a system setting and does not necessarily imply that there are multiple screens, nor that there are multiple spaces on any one screen
  static bool getScreensHaveSeparateSpaces(NativeMacOsFramework _lib) {
    return _lib._objc_msgSend_11(
        _lib._class_NSScreen1, _lib._sel_screensHaveSeparateSpaces1);
  }

  int get depth {
    return _lib._objc_msgSend_223(_id, _lib._sel_depth1);
  }

  CGRect get frame {
    return _lib._objc_msgSend_144(_id, _lib._sel_frame1);
  }

  CGRect get visibleFrame {
    return _lib._objc_msgSend_144(_id, _lib._sel_visibleFrame1);
  }

  NSDictionary? get deviceDescription {
    final _ret = _lib._objc_msgSend_207(_id, _lib._sel_deviceDescription1);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSColorSpace? get colorSpace {
    final _ret = _lib._objc_msgSend_224(_id, _lib._sel_colorSpace1);
    return _ret.address == 0
        ? null
        : NSColorSpace._(_ret, _lib, retain: true, release: true);
  }

  /// 0 terminated
  ffi.Pointer<ffi.Int32> get supportedWindowDepths {
    return _lib._objc_msgSend_225(_id, _lib._sel_supportedWindowDepths1);
  }

  /// canRepresentDisplayGamut: returns YES if the colorSpace of the receiving screen is capable of representing the given display gamut
  bool canRepresentDisplayGamut_(int displayGamut) {
    return _lib._objc_msgSend_226(
        _id, _lib._sel_canRepresentDisplayGamut_1, displayGamut);
  }

  /// Convert to/from the device pixel aligned coordinates system of a display
  CGRect convertRectToBacking_(CGRect rect) {
    return _lib._objc_msgSend_227(_id, _lib._sel_convertRectToBacking_1, rect);
  }

  CGRect convertRectFromBacking_(CGRect rect) {
    return _lib._objc_msgSend_227(
        _id, _lib._sel_convertRectFromBacking_1, rect);
  }

  /// Uses NSIntegralRectWithOptions() to produce a pixel aligned rectangle on the target screen from the given input rectangle in global screen coordinates.
  CGRect backingAlignedRect_options_(CGRect rect, int options) {
    return _lib._objc_msgSend_228(
        _id, _lib._sel_backingAlignedRect_options_1, rect, options);
  }

  /// Returns the scale factor representing the number of backing store pixels corresponding to each linear unit in screen space on this NSScreen. This method is provided for rare cases when the explicit scale factor is needed.  Please use -convert*ToBacking: methods whenever possible.
  double get backingScaleFactor {
    return _lib._objc_msgSend_186(_id, _lib._sel_backingScaleFactor1);
  }

  NSString? get localizedName {
    final _ret = _lib._objc_msgSend_17(_id, _lib._sel_localizedName1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  /// Indicates the obscured distance from each edge of the screen
  NSEdgeInsets get safeAreaInsets {
    return _lib._objc_msgSend_164(_id, _lib._sel_safeAreaInsets1);
  }

  /// The following two rects are at the top of the screen, outside the rectangle defined by safeAreaInsets, but also unobscured.  These rects are empty if there are no additional unobscured areas
  CGRect get auxiliaryTopLeftArea {
    return _lib._objc_msgSend_144(_id, _lib._sel_auxiliaryTopLeftArea1);
  }

  CGRect get auxiliaryTopRightArea {
    return _lib._objc_msgSend_144(_id, _lib._sel_auxiliaryTopRightArea1);
  }

  /// Returns the current maximum color component value for the screen. Typically the maximum is 1.0, but if any rendering context on the screen has requested extended dynamic range, it may return a value greater than 1.0, depending on system capabilities and other conditions. Only rendering contexts that support extended dynamic range can use values greater than 1.0. When the value changes, NSApplicationDidChangeScreenParametersNotification will be posted.
  double get maximumExtendedDynamicRangeColorComponentValue {
    return _lib._objc_msgSend_186(
        _id, _lib._sel_maximumExtendedDynamicRangeColorComponentValue1);
  }

  /// Returns the maximum color component value that the screen is capable of when extended dynamic range is enabled, regardless of whether or not extended dynamic range is currently enabled.
  double get maximumPotentialExtendedDynamicRangeColorComponentValue {
    return _lib._objc_msgSend_186(_id,
        _lib._sel_maximumPotentialExtendedDynamicRangeColorComponentValue1);
  }

  /// Returns the current maximum color component value for reference rendering to the screen. If values beyond this are used, the display hardware may adjust content to fit into its dynamic range. For screens that do not support reference rendering, this will return 0.
  double get maximumReferenceExtendedDynamicRangeColorComponentValue {
    return _lib._objc_msgSend_186(_id,
        _lib._sel_maximumReferenceExtendedDynamicRangeColorComponentValue1);
  }

  /// The maximum frames per second this screen supports.
  int get maximumFramesPerSecond {
    return _lib._objc_msgSend_18(_id, _lib._sel_maximumFramesPerSecond1);
  }

  /// The minimum refresh interval this screen supports, in seconds.
  ///
  /// This is the shortest amount of time a frame will be present on screen.
  /// minimumRefreshInterval and maximumRefreshInterval will be the same for displays that do not support variable refresh rates.
  double get minimumRefreshInterval {
    return _lib._objc_msgSend_186(_id, _lib._sel_minimumRefreshInterval1);
  }

  /// The maximum refresh interval this screen supports, in seconds.
  ///
  /// minimumRefreshInterval and maximumRefreshInterval will be the same for displays that do not support variable refresh rates.
  double get maximumRefreshInterval {
    return _lib._objc_msgSend_186(_id, _lib._sel_maximumRefreshInterval1);
  }

  /// The update granularity of the screen's current mode, in seconds.
  ///
  /// The display will update at the next boundary defined by the granularity, after the minimum refresh interval has been reached. When 0, the display can update at any time between the minimum and maximum refresh rate intervals of the screen. Fixed refresh rate screen modes will return the refresh interval as the update granularity (e.g. 16.66ms for 60Hz refresh rates), meaning updates only occur at refresh rate boundaries.
  double get displayUpdateGranularity {
    return _lib._objc_msgSend_186(_id, _lib._sel_displayUpdateGranularity1);
  }

  /// The time at which the last framebuffer update occurred on the display, in seconds since startup that the system has been awake.
  double get lastDisplayUpdateTimestamp {
    return _lib._objc_msgSend_186(_id, _lib._sel_lastDisplayUpdateTimestamp1);
  }

  /// This method is deprecated and should not be used by applications targeting Mac OS X 10.7 or later.
  /// The implementation of this method will always return 1.0.  Please use -convertRectToBacking: or -backingScaleFactor instead.
  double userSpaceScaleFactor() {
    return _lib._objc_msgSend_186(_id, _lib._sel_userSpaceScaleFactor1);
  }

  static NSScreen new1(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSScreen1, _lib._sel_new1);
    return NSScreen._(_ret, _lib, retain: false, release: true);
  }

  static NSScreen alloc(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSScreen1, _lib._sel_alloc1);
    return NSScreen._(_ret, _lib, retain: false, release: true);
  }
}

abstract class NSWindowDepth {
  static const int NSWindowDepthTwentyfourBitRGB = 520;
  static const int NSWindowDepthSixtyfourBitRGB = 528;
  static const int NSWindowDepthOnehundredtwentyeightBitRGB = 544;
}

class NSColorSpace extends _ObjCWrapper {
  NSColorSpace._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSColorSpace] that points to the same underlying object as [other].
  static NSColorSpace castFrom<T extends _ObjCWrapper>(T other) {
    return NSColorSpace._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSColorSpace] that wraps the given raw object pointer.
  static NSColorSpace castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSColorSpace._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSColorSpace].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSColorSpace1);
  }
}

abstract class NSDisplayGamut {
  static const int NSDisplayGamutSRGB = 1;
  static const int NSDisplayGamutP3 = 2;
}

abstract class NSAlignmentOptions {
  static const int NSAlignMinXInward = 1;
  static const int NSAlignMinYInward = 2;
  static const int NSAlignMaxXInward = 4;
  static const int NSAlignMaxYInward = 8;
  static const int NSAlignWidthInward = 16;
  static const int NSAlignHeightInward = 32;
  static const int NSAlignMinXOutward = 256;
  static const int NSAlignMinYOutward = 512;
  static const int NSAlignMaxXOutward = 1024;
  static const int NSAlignMaxYOutward = 2048;
  static const int NSAlignWidthOutward = 4096;
  static const int NSAlignHeightOutward = 8192;
  static const int NSAlignMinXNearest = 65536;
  static const int NSAlignMinYNearest = 131072;
  static const int NSAlignMaxXNearest = 262144;
  static const int NSAlignMaxYNearest = 524288;
  static const int NSAlignWidthNearest = 1048576;
  static const int NSAlignHeightNearest = 2097152;
  static const int NSAlignRectFlipped = -9223372036854775808;
  static const int NSAlignAllEdgesInward = 15;
  static const int NSAlignAllEdgesOutward = 3840;
  static const int NSAlignAllEdgesNearest = 983040;
}
